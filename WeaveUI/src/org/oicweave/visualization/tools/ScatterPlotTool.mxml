<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="org.oicweave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="org.oicweave.ui.*" 
			   xmlns:settings="org.oicweave.ui.settings.*" xmlns:LinkableObjectList="org.oicweave.ui.LinkableObjectList.*"
			   xmlns:userControls="org.oicweave.ui.userControls.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import org.oicweave.api.primitives.IBounds2D;
			import org.oicweave.api.data.IColumnWrapper;
			import org.oicweave.api.data.IPrimitiveColumn;
			import org.oicweave.compiler.MathLib;
			import org.oicweave.utils.NumberUtils;
			import mx.controls.TextArea;
			import mx.core.UIComponent;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ResizeEvent;
			import mx.events.SliderEvent;
			
			import org.oicweave.Weave;
			import org.oicweave.core.LinkableBoolean;
			import org.oicweave.core.LinkableNumber;
			import org.oicweave.core.LinkableString;
			import org.oicweave.core.LinkableVariable;
			import org.oicweave.core.SessionManager;
			import org.oicweave.core.UIUtils;
			import org.oicweave.api.getCallbackCollection;
			import org.oicweave.api.linkBindableProperty;
			import org.oicweave.api.linkSessionState;
			import org.oicweave.api.newLinkableChild;
			import org.oicweave.api.registerLinkableChild;
			import org.oicweave.data.AttributeColumns.DynamicColumn;
			import org.oicweave.data.AttributeColumns.FilteredColumn;
			import org.oicweave.api.data.IAttributeColumn;
			import org.oicweave.api.data.IColumnWrapper;
			import org.oicweave.api.data.IPrimitiveColumn;
			import org.oicweave.api.data.IKeyFilter;
			import org.oicweave.api.data.IKeySet;
			import org.oicweave.primitives.Bounds2D;
			import org.oicweave.ui.AttributeSelectorPanel;
			import org.oicweave.ui.DraggablePanel;
			import org.oicweave.utils.BitmapText;
			import org.oicweave.utils.BitmapUtils;
			import org.oicweave.utils.ColumnUtils;
			import org.oicweave.utils.DebugUtils;
			import org.oicweave.utils.ProbeTextUtils;
			import org.oicweave.visualization.layers.PlotLayer;
			import org.oicweave.visualization.layers.SelectablePlotLayer;
			import org.oicweave.visualization.plotters.AxisPlotter;
			import org.oicweave.visualization.plotters.CircleGlyphPlotter;
			import org.oicweave.visualization.plotters.ProbeLinePlotter;
			import org.oicweave.visualization.plotters.RegressionLinePlotter;
			import org.oicweave.visualization.plotters.ScatterPlotPlotter;
			import org.oicweave.visualization.plotters.styles.SolidFillStyle;
			
			private const REGRESSION_LAYER_NAME:String = "regressionLine";
			public var _plotter:ScatterPlotPlotter = null;
			private var _regressionLineLayer:SelectablePlotLayer ;
			private var _regressionPlotter:RegressionLinePlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(ScatterPlotPlotter) as ScatterPlotPlotter;
				visualization.enableProbeLine(true, labelFunctionY, labelFunctionX);
				
				initRegressionLayer() ;
				
				xAxisEnabled = true;
				yAxisEnabled = true;
				
				//BEGIN TEMPORARY SOLUTION
				visualization.marginLeft.addGroupedCallback(this, updateAxisLabels);
				visualization.marginBottom.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.enableZoomAndPan.value = false;
				
				visualization.enableXAxisProbing = true;
				visualization.enableYAxisProbing = true;
				
				xAxisLayer.axisPlotter.setLabelFunction(labelFunctionX);
				yAxisLayer.axisPlotter.setLabelFunction(labelFunctionY);
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, AttributeSelectorPanel.openToolSelector, [this, _plotter.xColumn])
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, AttributeSelectorPanel.openToolSelector, [this, _plotter.yColumn])
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(visualization.dataBounds).addGroupedCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addGroupedCallback(this, invalidateAxes, true);
				
				initColumnDefaults(_plotter.xColumn, _plotter.yColumn, colorColumn);
				
				toolTitle.addImmediateCallback(this, updateTitle);
				
				_plotter.xColumn.addGroupedCallback(this, updateProbeColumns);
				_plotter.yColumn.addGroupedCallback(this, updateProbeColumns);
				colorColumn.addGroupedCallback(this, updateProbeColumns);
				
				_plotter.enabledSizeBy.value = true;
				visualization.marginBottom.value = 80;
				visualization.marginTop.value    = 10;
				visualization.marginLeft.value   = 80;
				visualization.marginRight.value  = 10;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X", "Y", "Color", "Size"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.xColumn, _plotter.yColumn, colorColumn, _plotter.radiusColumn];
			}
			
			private function initRegressionLayer():void
			{
				_regressionLineLayer = visualization.layers.requestObject(REGRESSION_LAYER_NAME, SelectablePlotLayer, true);
				_regressionLineLayer.layerIsSelectable.value = false;
				_regressionLineLayer.layerIsSelectable.lock();
				_regressionPlotter = _regressionLineLayer.getDynamicPlotter().requestLocalObject(RegressionLinePlotter,true);
				linkSessionState(_plotter.xColumn, _regressionPlotter.xColumn);
				linkSessionState(_plotter.yColumn, _regressionPlotter.yColumn);
				_regressionPlotter.drawLine.value = false;				
			}
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if(includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [];
					if (_plotter.xColumn.internalColumn)
						visualization.additionalProbeColumns.push(_plotter.xColumn.internalColumn);
					if (_plotter.yColumn.internalColumn)
						visualization.additionalProbeColumns.push(_plotter.yColumn.internalColumn);
					if (colorColumn.internalColumn)
						visualization.additionalProbeColumns.push(colorColumn.internalColumn);
					if (visualization.additionalProbeColumns.length == 0)
						visualization.additionalProbeColumns = null ;
				}
				else visualization.additionalProbeColumns = null;
			}
			
			private function invalidateAxes():void
			{
				updateTitle();
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
					title = "Scatter Plot of " + ColumnUtils.getTitle(_plotter.xColumn) + " -vs- " + ColumnUtils.getTitle(_plotter.yColumn);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.enabledSizeBy, sizeByCheck, "selected");
				_plotter.minScreenRadius.addGroupedCallback(this, updateSizeSlider);
				_plotter.maxScreenRadius.addGroupedCallback(this, updateSizeSlider, true);
				getCallbackCollection(_regressionPlotter).addGroupedCallback(this, updateEquation, true);
				
				Weave.properties.axisFontFamily.addGroupedCallback(this,updateEquationStyle);
				Weave.properties.axisFontColor.addGroupedCallback(this,updateEquationStyle);
				Weave.properties.axisFontSize.addGroupedCallback(this,updateEquationStyle);
				Weave.properties.axisFontUnderline.addGroupedCallback(this, updateEquationStyle, true);
			}
			
			private function updateEquationStyle():void
			{
				equationText.setStyle("fontFamily", Weave.properties.axisFontFamily.value);
				equationText.setStyle("color", Weave.properties.axisFontColor.value);
				equationText.setStyle("fontSize", Weave.properties.axisFontSize.value);
				if (Weave.properties.axisFontUnderline.value)
					equationText.setStyle("textDecoration", "underline");
				else
					equationText.setStyle("textDecoration", "none");
			}
			
			private function updateEquation():void
			{
				if ( _regressionPlotter.drawLine.value )
				{
					var slope:Number = MathLib.roundSignificant(_regressionPlotter.getSlope(), 4);
					var intercept:Number = MathLib.roundSignificant(_regressionPlotter.getIntercept(), 4);
					lineEquation.text = "Equation: y = " + slope + "x"+ " + " + intercept;
					equationText.text = "slope = " + slope + "\nintercept = " + intercept;
					if (!contains(equationText))
						addChild(equationText);
				}
				else
				{ 
					lineEquation.text = "Equation: y = mx + b";
					if (contains(equationText))
						removeChild(equationText);
				}
			}
			private function updateAxisLabels():void
			{
				visualization.setXAxisColumn(_plotter.xColumn);
				visualization.setYAxisColumn(_plotter.yColumn);
				
				if (_plotter == null)
					title = "Scatter Plot";
				/*				else
				title = "Scatter Plot of " + _plotter.xColumn.title + " -vs- " + _plotter.yColumn.title;
				*/					
				xAxisLayer.axisPlotter.setSideAxisName(
					ColumnUtils.getTitle(_plotter.xColumn), 
					0,   
					0, visualization.marginBottom.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				
				yAxisLayer.axisPlotter.setSideAxisName(
					ColumnUtils.getTitle(_plotter.yColumn), 
					-90, 
					-visualization.marginLeft.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP
				);
			}
			
			public function labelFunctionX(value:Number):String
			{
				// try to find an internal IPrimitiveColumn
				var column:IAttributeColumn = _plotter.xColumn;
				while (!(column is IPrimitiveColumn) && column is IColumnWrapper)
					column = (column as IColumnWrapper).internalColumn;
				if (column is IPrimitiveColumn)
					return (column as IPrimitiveColumn).deriveStringFromNumber(value);
				return null; // use default label
			}
			public function labelFunctionY(value:Number):String
			{
				// try to find an internal IPrimitiveColumn
				var column:IAttributeColumn = _plotter.yColumn;
				while (!(column is IPrimitiveColumn) && column is IColumnWrapper)
					column = (column as IColumnWrapper).internalColumn;
				if (column is IPrimitiveColumn)
					return (column as IPrimitiveColumn).deriveStringFromNumber(value);
				return null; // use default label
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			private function updateSizeSlider():void
			{
				sizeBySlider.values = [_plotter.minScreenRadius.value, _plotter.maxScreenRadius.value];
				//this.closeable.value = false ;
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				if(event.thumbIndex == 0)
				{
					_plotter.minScreenRadius.value = event.value;
				}
				else
				{
					//_plotter.defaultScreenRadius.value = event.value;
					_plotter.maxScreenRadius.value = event.value;
				}
			}
			
			private function handleSizeByTextChange(event:Event):void
			{
				if (sizeByCheck.selected)
				{ 
					sizeByCheck.label = "Size by: " + ColumnUtils.getTitle(_plotter.radiusColumn);
					sizeByCheck.setStyle("textRollOverColor", "0x339900");
					sizeByCheck.setStyle("textSelectedColor", "0x339900");
					sizeByCheck.setStyle("Color", "0x339900");
					sizeBySlider.enabled = true;
				}
				else
				{
					sizeByCheck.label = "Size by: DISABLED";
					sizeByCheck.setStyle("textRollOverColor", "0xCC3300");
					sizeByCheck.setStyle("textSelectedColor", "0xCC3300");
					sizeByCheck.setStyle("Color", "0xCC3300");
					sizeBySlider.enabled = false;
				}
				
			}
			
			protected function Legend_clickHandler(event:MouseEvent):void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
		]]>
	</mx:Script>
	<ui:AutoResizingTextArea id="equationText"
		 backgroundAlpha="0" editable="false" borderThickness="0" width="0"
				 bottom="0"
				 left="0"/>
	<ui:ControlPanel>
		<mx:VBox id="VizControlsPanel" label="Visualization Controls">
			<mx:Button id="Legend" label="legend" click="Legend_clickHandler(event)"/>
			<mx:HBox width="100%" 
					 borderStyle="inset" 
					 backgroundColor="0xFFFFFF" 
					 backgroundAlpha="0.7">
				<mx:Label text="Point Opacity:" 
						  color="0x000000" fontSize="12" 
						  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
				
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							alpha="1.0"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</mx:HBox>
			<userControls:ControlsSubsetBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="Checking this box makes the x, y, color and size attributes visible in this tool's probe tooltip"
							 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
			</userControls:ControlsSubsetBox>
			<mx:VBox borderStyle="inset"
					 backgroundColor="0xFFFFFF" 
					 backgroundAlpha="0.7"
					 width="100%">
				<mx:HBox width="100%"> 
					<mx:CheckBox id="sizeByCheck" 
								 fontSize="12" 
								 label="Size by: ENABLED" 
								 color="{sizeByCheck.selected? 0x339900 : 0xCC3300}"
								 textRollOverColor="0x339900"
								 selected="true" 
								 click="handleSizeByTextChange(event)"/>
					<mx:Label id="sizeByColumnLabel" enabled="{sizeByCheck.selected}" color="0xffffff" width="100%"  fontSize="9"/>
				</mx:HBox>
				
				<mx:HBox width="100%"> 
					<mx:Label text="Point Size:" 
							  color="0x000000" 
							  fontSize="12"/>
					<mx:HSlider id="sizeBySlider"
								liveDragging="true"
								width="100%"
								thumbCount="2" 
								snapInterval="1"
								minimum="1" 
								maximum="60"
								tickInterval="5"
								change="handleSizeSliderChange(event)"
								mouseDown="event.stopImmediatePropagation();"/>
				</mx:HBox>
				<ui:DynamicColumnComponent visTool="{this}" label="x column" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.xColumn"/>
				<ui:DynamicColumnComponent visTool="{this}" label="y column" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.yColumn"/>
				<ui:DynamicColumnComponent visTool="{this}" label="color" initialize="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"/>
				<ui:DynamicColumnComponent visTool="{this}" label="size" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.radiusColumn"/>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox id="AdvancedPanel" label="Advanced">
			<userControls:ControlsSubsetBox>
				<mx:VBox>
					<mx:CheckBox id="regressionLineCheckBox" label="Enable regression line"
								 toolTip="Check this box to draw a regression line on the scatterplot"
								 initialize="linkBindableProperty(_regressionPlotter.drawLine,regressionLineCheckBox,'selected')"/>
					<mx:Label id="lineEquation" text="Equation: y = mx + b"/>
					<mx:HBox>
						<mx:Label text="Line Color" />
						<mx:ColorPicker id="regressionColorPicker" 
										initialize="linkBindableProperty(_regressionPlotter.lineStyle.color.defaultValue, regressionColorPicker, 'selectedColor')"
										enabled="{regressionLineCheckBox.selected}"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Line Thickness" />
						<mx:HSlider id="regressionThicknessSlider"
									initialize="linkBindableProperty(_regressionPlotter.lineStyle.weight.defaultValue, regressionThicknessSlider, 'value')"
									enabled="{regressionLineCheckBox.selected}"
									minimum="1" maximum="10" snapInterval="1" liveDragging="true"
									tickInterval="1"/>
					</mx:HBox>
					<mx:HBox>
						<mx:Label text="Line Opacity" />
						<mx:HSlider id="regressionAlphaSlider"
									enabled="{regressionLineCheckBox.selected}"
									minimum="0.1" maximum="1" snapInterval=".1" liveDragging="true"
									tickInterval="0.1"
									initialize="linkBindableProperty(_regressionPlotter.lineStyle.alpha.defaultValue, regressionAlphaSlider, 'value')"/>
					</mx:HBox>
				</mx:VBox>
			</userControls:ControlsSubsetBox>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
