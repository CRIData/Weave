<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns="weave.ui.settings.*" 
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:ui="weave.ui.*" 
		 width="100%" 
		 height="100%"
		 creationPolicy="all"
		 creationComplete="handleCreationComplete()"
		 >
<!--
	<mx:Array id="borderList">
		<mx:Object name="Solid" imageFile="@Embed(source='/weave/resources/images/borderImages/Border1.png')"/>
		<mx:Object name="Dotted" imageFile="@Embed(source='/weave/resources/images/borderImages/Border2.png')"/>
		<mx:Object name="Dash Small" imageFile="@Embed(source='/weave/resources/images/borderImages/Border3.png')"/>
		<mx:Object name="Dash Wide" imageFile="@Embed(source='/weave/resources/images/borderImages/Border4.png')"/>
		<mx:Object name="Dash-Dot-wide" imageFile="@Embed(source='/weave/resources/images/borderImages/Border5.png')"/>
		<mx:Object name="Dash-Dot-small" imageFile="@Embed(source='/weave/resources/images/borderImages/Border6.png')"/>
	</mx:Array>
-->
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.core.ClassFactory;
			import mx.core.IFlexDisplayObject;
			import mx.effects.effectClasses.HideShowEffectTargetFilter;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.linkBindableProperty;
			import weave.core.LinkableBoolean;
			import weave.core.SessionManager;
			import weave.ui.DraggablePanel;
			import weave.utils.EventUtils;
			import weave.visualization.tools.SimpleVisTool;
			
			[Bindable]
			public var selectedColor:uint;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				windowTitleFontControl.initialize();
				windowTitleFontControl.fontFamilyCombo.addEventListener(ListEvent.CHANGE, handleFontListChange );

				toolFontControl.initialize();
				toolFontControl.removeChild(toolFontControl.fontFamilyCombo);
				toolFontControl.removeChild(toolFontControl.underlineButton);
				toolFontControl.removeChild(toolFontControl.boldButton);
				toolFontControl.removeChild(toolFontControl.italicButton);
			}
			
			private function handleCreationComplete():void
			{
				linkBindableProperty(Weave.properties.panelTitleFontFamily, windowTitleFontControl.fontFamilyCombo, "selectedLabel");
				linkBindableProperty(Weave.properties.panelTitleFontSize,windowTitleFontControl.fontSizeCombo, "selectedItem");
				linkBindableProperty(Weave.properties.panelTitleFontColor, windowTitleFontControl.colorPicker, "selectedColor");
				linkBindableProperty(Weave.properties.panelTitleFontBold, windowTitleFontControl.boldButton, "selected");
				linkBindableProperty(Weave.properties.panelTitleFontItalic, windowTitleFontControl.italicButton, "selected");
				linkBindableProperty(Weave.properties.panelTitleFontUnderline, windowTitleFontControl.underlineButton, "selected");
				
				linkBindableProperty(Weave.properties.axisFontSize, toolFontControl.fontSizeCombo, "selectedItem");
				linkBindableProperty(Weave.properties.axisFontColor, toolFontControl.colorPicker, "selectedColor");
				linkBindableProperty(Weave.properties.axisFontUnderline, toolFontControl.underlineButton, "selected" );
			}
			
			private function handleFontListChange(event:ListEvent):void
			{
				Weave.properties.panelTitleFontFamily.value = event.target.selectedLabel;
			}
		]]>
	</mx:Script>
	<mx:VBox verticalGap="16">
		<mx:VBox>
			<mx:Label text="Window Title Font Properties:"/>
			<FontControl id="windowTitleFontControl"/> 
		</mx:VBox>
		
		<mx:VBox>
			<mx:Label text="Default Tool Font Properties:"/>
			<FontControl id="toolFontControl"/>
		</mx:VBox>
		
		<mx:HBox>
			<mx:Label text="Background Color:"/>
			<mx:ColorPicker id="swatches" selectedColor="0xCCCCCC" 
							initialize="linkBindableProperty(Weave.properties.backgroundColor,swatches,'selectedColor')"
							/>
		</mx:HBox>
		
		<mx:CheckBox toolTip="Check this box to show all windows in 'dashboard' mode. Enabling this will hide borders around the tool, hide the bar on the top of the tool, and not allow the tool to be dragged, minimized, maximized, closed, or any other function accessed from the top of the panel."
					 id="dashboardMode"
					 label="Enable dashboard mode" 
					 selected="false"
					 initialize="linkBindableProperty(Weave.properties.dashboardMode, dashboardMode, 'selected');"
					 />
		<mx:CheckBox toolTip="Check this box to enable the Attribute Selector."
					 id="enableToolControls"
					 label="Enable tool controls"
					 selected="true"
					 initialize="linkBindableProperty(Weave.properties.enableToolControls, enableToolControls, 'selected');"
					 />
		
		<!--<mx:CheckBox toolTip="Show or Hide View TabBar"
		id="viewsTabBar"
		label="Show View TabBar"
		initialize="linkBindableProperty(Weave.properties.showViewBar,viewsTabBar,'selected')"/>
		
		<mx:CheckBox toolTip="Set Active Window Border"
		visible="{isActive}"
		id="toggleActiveBorders"
		label="Show Active Panel Border"
		selected="true"
		initialize="handleActiveWindowBorderCheckCreated(event)"/> 
		
		<mx:HBox visible="{isActive}">  
		<mx:Label text="Tool Border:"/> 
		
		<ui:CustomComboBox id="list" dataProvider="{borderList}" maxWidth="96"
		initialize="initCell();" labelField="{data.@name}"/>
		
		</mx:HBox>-->
		
	</mx:VBox>	
</mx:VBox>	
