<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
    	 
    	 backgroundColor="0x8a8a8a" backgroundAlpha="1.0"
    	 cornerRadius="7"
    	 
    	 verticalAlign="middle"
    	 
	     width="100%"
	     styleName="weave-menu-bar-style"
	     horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:ui="weave.ui.*" xmlns="weave.ui.controlBars.*">

	<mx:Style>
		.weave-menu-style {
			color: #000000;
			selectionColor: #F8A4FB;
			textRollOverColor: #FFFFFF;
			textSelectedColor: #000000;
			openDuration: 0;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			
		}
		
		.weave-menu-bar-style {
			rollOverColor: #88A4DB;
			selectionColor: #F8A4FB;
			cornerRadius: 7;
			fontFamily: Arial;
			fontWeight: bold;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			highlightAlphas: 0, 0;
   			fillAlphas: 1, 1;
   			button-style-name: "weave-menu-bar-button-style";
   			
		}
		
		.weave-menu-bar-button-style {
			cornerRadius: 0;
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 0;
			paddingBottom: 0;
		}
	</mx:Style>

	<mx:XML format="e4x" id="dp2"> 
        <root>
            <editItem label="Cut"/> 
            <editItem label="Copy"/> 
            <editItem label="Paste"/> 
            <separator type="separator"/>
            <editItem label="Delete"/> 
        </root>
    </mx:XML>


	<mx:MenuBar id="menubar"
	        change="handleMenuItemChosen(event)"
	        height="22"
			width="100%"
	        dataProvider="{_menuList}"
	        labelField="weaveLabel"
			iconField="iconURL"
				        
	        menuShow="handleMenuShow(event)"
	        
	        menuStyleName="weave-menu-style"
	       	styleName="weave-menu-bar-style"
	        />
	<mx:Style>
		.menu-button-style {
			padding-left: 0;
			padding-right: 0;
			padding-top: 2;
			padding-bottom: 2;
			corner-radius: 0;
			fill-alphas: 1, 1;
			fill-colors: #dadada, #dadada;
		}
	</mx:Style>
	<!--<mx:HBox horizontalGap="3" backgroundAlpha="1" backgroundColor="white" paddingLeft="4" paddingRight="4" paddingTop="2" paddingBottom="2">
		<controlBars:weavePopUpMenuButton icon="@Embed(source='weave/resources/images/menu_data.png')" 
										  styleName="menu-button-style" width="24" 
										  dataProvider="{['New Folder','Sent Items','Inbox']}"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_print.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_tools.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_selection.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_session.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_views.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_windows.png')" styleName="menu-button-style" width="24"/>
		<mx:Button icon="@Embed(source='weave/resources/images/menu_help.png')" styleName="menu-button-style" width="24"/>
	</mx:HBox>-->
	 <!-- backgroundColor="#CCCCCC" backgroundAlpha="0.5" cornerRadius="10" alpha="1.0" borderStyle="solid" paddingBottom="2" paddingLeft="5" paddingRight="5" paddingTop="2" borderColor="#6E6C6C" -->
	<!-- <mx:HBox >
	 	<controlBars:WeavePopUpMenuButton popUpIcon="@Embed(source='weave/resources/images/menuBarViewsIcon.png')"
	 						cornerRadius="0" hideLabel="true" paddingRight="5"
	 						width="24" height="24" 
	 						showRoot="false" dataProvider="{dp2}" labelField="@label"/>
	 	<controlBars:WeavePopUpMenuButton popUpIcon="@Embed(source='weave/resources/images/menuBarSubsetsIcon.png')"
	 						cornerRadius="0" hideLabel="true" paddingRight="5"
	 						width="24" height="24" 
	 						showRoot="false" dataProvider="{dp2}" labelField="@label"/>
	 						
	 	<controlBars:WeavePopUpMenuButton id="selectionsButton"
	 						popUpIcon="@Embed(source='weave/resources/images/menuBarSelectionsIcon.png')"
	 						cornerRadius="0" hideLabel="true" paddingRight="5"
	 						width="24" height="24" 
	 						showRoot="false" dataProvider="{_dp}" 
	 						labelField="weaveLabel" iconField="iconURL"
	 						open="handlePopUpMenuOpen(event)"
	 						/>
	 	
	 </mx:HBox>-->
	 
	 <mx:HBox  id="logoParentHBox" verticalAlign="middle" right="{menubar.getStyle('cornerRadius') + 3}" top="{(menubar.height) / 2}">
	 	<!--<controlBars:VisIconSet id="iconSet"/>-->
	 	<ui:OICLogoPane id="oicLogo"/>
	 </mx:HBox>       
	

    <mx:Script>
    	<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Button;
			import mx.controls.Menu;
			import mx.controls.menuClasses.MenuBarItem;
			import mx.controls.menuClasses.MenuItemRenderer;
			import mx.events.DropdownEvent;
			import mx.events.MenuEvent;
			import mx.events.PropertyChangeEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.UIDUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.core.ErrorManager;
			import weave.primitives.GeneralizedGeometry;
			import weave.ui.DraggablePanel;
			import weave.ui.OICLogoPane;
    		
			[Bindable]
			private var _dp:ArrayCollection = new ArrayCollection([]);

			[Bindable]
			private var _menuList:ArrayCollection = new ArrayCollection();

			/*private function handlePopUpMenuOpen(event:DropdownEvent):void
			{
				var menu:Menu = (selectionsButton.popUp as Menu);
				
				if(menu) 
				{
					menu.variableRowHeight = true
					menu.invalidateSize();
				}
			}*/

			// tip taken from : http://blog.flexexamples.com/2010/02/19/setting-a-variable-row-height-on-an-mx-menubar-control-in-flex/
			private function handleMenuShow(event:MenuEvent):void
			{
				// this will reduce the vertical space between separators and other items in the menu
				event.menu.variableRowHeight = true;
				event.menu.invalidateSize();
				
				validateNow();
			}
    		
    		
    		public function refreshMenuBar():void
    		{
    			_menuList.refresh();
				
				validateNow();
    		}
    		
    		public function removeAllMenus():void
    		{
    			_menuList.removeAll();
				
				validateNow();
    		}
			override protected function createChildren():void
			{
				super.createChildren();

    			var saveCurrentMenuItem:WeaveMenuItem2 = new WeaveMenuItem2();
				saveCurrentMenuItem.labelMethod.value = '"Save current selection..."';
    			_dp.addItem(saveCurrentMenuItem);
    			_dp.addItem(WeaveMenuItem.makeNewSeparatorItem());
    			
    			var manageSelectionsMenuItem:WeaveMenuItem2 = new WeaveMenuItem2();
				manageSelectionsMenuItem.labelMethod.value = '"Manage selections..."';
    			_dp.addItem(manageSelectionsMenuItem);
    			
    			_dp.addItem(WeaveMenuItem.makeNewSeparatorItem());
    			
    			_dp.addItem( new WeaveMenuItem2() );
    			
    			var mi:WeaveMenuItem2 = new WeaveMenuItem2();
    			mi.type = WeaveMenuItem.TYPE_RADIO;
				mi.groupName = "savedSelections";
				mi.enabled = true;
				mi.toggledFunction = function ():Boolean {
					return Math.random() > 0.5;
				};
				
    			_dp.addItem( mi );
				
				Weave.properties.showCopyright.addGroupedCallback(this, addLogo, true);
    		}
    		
			private function addLogo():void
			{
				if (!parent)
					return callLater(addLogo);
				
				if (Weave.properties.showCopyright.value)
					addChild(logoParentHBox);
				else if (this == logoParentHBox.parent)
					removeChild(logoParentHBox);
			}

    		// NOTE: for now NO submenus!!
    		public function addMenuToMenuBar(menuName:String, isDynamic:Boolean = false, enabled:Boolean = true, separatorBefore:Boolean = false):WeaveMenuItem2
    		{
//    			if(separatorBefore)
//    				_menuList.addItem( WeaveMenuItem2.makeNewSeparatorItem() );
    				
    			var menuItem:WeaveMenuItem2 = new WeaveMenuItem2();
				menuItem.labelMethod.value = '"' + menuName + '"';
    			menuItem.isDynamic = isDynamic;
    			menuItem.enabled = enabled;
    			_menuList.addItem(menuItem);

    			return menuItem;
    		}
			public function getNewChildForMenu(menu:WeaveMenuItem2):WeaveMenuItem2
			{
				var newName:String = menu.childMenus.generateUniqueName("WeaveMenuItem2");
				var menuItem:WeaveMenuItem2 = menu.childMenus.requestObject(newName, WeaveMenuItem2, false);
				if (_menuItemToName[menuItem] == undefined)
					_menuItemToName[menuItem] = newName;
				return menuItem;
			}
    		public function removeMenuItemFromMenu(menuItemToRemove:WeaveMenuItem2, parentMenu:WeaveMenuItem2):void
    		{
				parentMenu.childMenus.removeObject(parentMenu.childMenus.getName(menuItemToRemove));
				
				parentMenu.validateNow();
				validateNow();
			}
    		public function addSeparatorToMenu(menu:WeaveMenuItem2):void
    		{
    			// stop if the last item is already a separator
				var menuChildren:Array = menu.childMenus.getObjects();
    			if (menuChildren.length > 0)
    			{
	    			var lastChild:WeaveMenuItem2 = menuChildren[menuChildren.length - 1];
	    			if (lastChild.type == WeaveMenuItem.TYPE_SEPARATOR)
	    				return;
	    		}

				var menuItem:WeaveMenuItem2 = menu.makeNewSeparatorItem();
    		}
    		
    		private function handleMenuItemChosen(event:MenuEvent):void
    		{   
    			try
				{
    				var targetMenuItem:WeaveMenuItem2 = (event.item as WeaveMenuItem2);    					
    				
    				targetMenuItem.runClickFunction();
    			}
    			catch(error:Error)
    			{
					WeaveAPI.ErrorManager.reportError(error);
    			}
    		}
			
			
			private var _menuItemToName:Dictionary = new Dictionary();
    	]]>
    </mx:Script>
</mx:HBox>
