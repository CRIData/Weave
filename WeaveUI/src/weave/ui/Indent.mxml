<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:HBox
    xmlns="weave.ui.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalAlign="middle"
    horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationPolicy="all"
	width="100%"
	addedToStage="handleAddedToStage()"
    >
    <mx:Script>
    	<![CDATA[
			import mx.controls.Label;

			private static const _groups:Dictionary = new Dictionary(true);
			
			public const labelComponent:Label = new Label();
			
			private var _group:* = undefined;
			private var _grouped:Boolean = true;
    	
    		override protected function createChildren():void
    		{
    			super.createChildren();
				
				labelTextAlign = "right";
    			addChildAt(labelComponent, 0);
    		}
			
			private function handleAddedToStage():void
			{
				if (_grouped && parent && _group === undefined)
					setGroup(parent);
			}
			
			public function set grouped(value:Boolean):void
			{
				_grouped = value;
				handleAddedToStage();
			}
			
			public function set group(indentGroup:IndentGroup):void
			{
				setGroup(indentGroup);
			}
			
			private function setGroup(newGroup:Object):void
			{
				var array:Array;
				// remove from existing group
				if (_group)
				{
					array = _groups[_group] as Array;
					array.splice(array.indexOf(this), 1);
				}
				
				_group = newGroup;
				
				// add to new group
				if (_group)
				{
					array = _groups[_group] as Array;
					if (!array)
						_groups[_group] = array = [];
					array.push(this);
				}
				
				invalidateSize();
			}
			
			override public function validateSize(recursive:Boolean=false):void
			{
				if (_group)
				{
					var array:Array = _groups[_group] as Array;
					var max:Number = 0;
					var item:Indent;
					for each (item in array)
						max = Math.max(max, item.labelComponent.measuredWidth);
					for each (item in array)
						item.labelComponent.width = max;
				}
				super.validateSize(recursive);
			}
			
			public function set labelTextAlign(value:String):void
			{
				labelComponent.setStyle("textAlign", value);
			}
			
    		[Bindable]
    		public function get indent():int
			{
				return labelComponent.width;
			}
    		public function set indent(value:int):void
			{
				group = null; // remove from group
				labelComponent.width = value;
			}
    		
    		override public function get label():String { return labelComponent.text; }
    		override public function set label(value:String):void { labelComponent.text = value; }
    	]]>
    </mx:Script>
</mx:HBox>
