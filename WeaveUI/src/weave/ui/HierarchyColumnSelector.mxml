<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<mx:VBox width="100%" height="100%"
	xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="weave.api.core.ILinkableObject"
	show="this.invalidateSize();"
	>
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
		]]>
	</mx:Script>
	<ui:DimensionTreeSelector height="100%" visible="true" id="dimensionTreeView"/>
	<mx:HBox id="dummyHBox" minWidth="0" width="100%"
			 borderColor="#000000" 
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<ui:TextInputWithPrompt id="searchCategoryTerms"
					  prompt="Search categories"
					  keyUp="loadFilteredCategories();"
					  clear="loadFilteredCategories();"
					  width="100%"/>
		<ui:TextInputWithPrompt id="searchAttrTerms"
					  prompt="Search attribute columns"
					  keyUp="loadFilteredAttributes();"
					  clear="loadFilteredAttributes();"
					  width="100%"/>
		<mx:HBox id="keyTypeControls" width="100%" toolTip="Select a desired key type.  Use this feature when you want to match up this data to a key type other than its own.">
			<mx:Label text="Key type:"/>
			<ui:CustomComboBox id="keyTypeCombo" width="100%"/>
		</mx:HBox>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.data.IDataSource;
			import weave.api.getSessionState;
			import weave.api.core.ICallbackCollection;
			import weave.api.getCallbackCollection;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.utils.HierarchyUtils;
			import weave.api.newLinkableChild;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.List;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.effects.easing.Circular;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.graphics.Stroke;
			import mx.managers.CursorManager;
			import mx.managers.DragManager;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.api.data.IAttributeColumn;
			import weave.data.AttributeColumns.ProxyColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.api.data.IDataSource;
			import weave.data.DataSources.MultiDataSource;
			import weave.primitives.AttributeHierarchy;
			import weave.core.SessionManager;
			import weave.core.WeaveXMLEncoder;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				// remove the dummy because we don't want it on the screen
				removeChild(dummyHBox);
				// alter the category selection interface
				dimensionTreeView.categoryVBox.addChildAt(searchCategoryTerms, 0);
				// alter the attribute selection interface
				dimensionTreeView.attributeVBox.addChildAt(searchAttrTerms, 0);
				//dimensionTreeView.attributeVBox.addChild(keyTypeControls);
				
				// when a column is clicked on, refresh the keyTypeCombo
				function updateKeyTypeCombo():void
				{
					keyTypeCombo.dataProvider = WeaveAPI.QKeyManager.getAllKeyTypes();
					var attribute:XML = HierarchyUtils.getLeafNodeFromPath(dimensionTreeView.selectedPath.value);
					if (attribute)
						keyTypeCombo.selectedLabel = attribute.attribute(AttributeColumnMetadata.KEY_TYPE);
					keyTypeCombo.enabled = false; // temporary
				}
				getCallbackCollection(dynamicColumn).addGroupedCallback(this, updateKeyTypeCombo, true);
				getCallbackCollection(WeaveAPI.QKeyManager).addGroupedCallback(this, updateKeyTypeCombo, true);
				
				
				
				
				
				registerLinkableChild(this, dimensionTreeView);

				linkSessionState(multiDataSource.attributeHierarchy, dimensionTreeView.attributeHierarchy);
				dimensionTreeView.selectedPath.addGroupedCallback(this, handleSelectedPathChange);
				dimensionTreeView.attributesView.dragEnabled = true;
				dimensionTreeView.attributesView.addEventListener(DragEvent.DRAG_START, handleAttributeDrag);
				
				_timer.addEventListener(TimerEvent.TIMER,handleTimer);
			}
			
			private const multiDataSource:MultiDataSource = MultiDataSource.instance;
			
			private function handleSelectedPathChange():void
			{
				if (selectedPath == null)
					return;
				// initialize categories up until leaf node
				var depth:int = HierarchyUtils.getPathDepth(selectedPath);
				for (var i:int = 1; i <= depth; i++)
				{
					var hierarchy:XML = getSessionState(multiDataSource.attributeHierarchy) as XML;
					var node:XML = HierarchyUtils.getNodeFromPath(hierarchy, selectedPath, i);
					if (node != null && node.localName().toString() != 'attribute')
						multiDataSource.initializeHierarchySubtree(node);
				}
				var attribute:XMLList = selectedPath.descendants("attribute");
				if (attribute.length() > 0)
				{
					// if the internal column is not a ReferencedColumn, initialize it now
					var referencedColumn:ReferencedColumn = dynamicColumn.internalColumn as ReferencedColumn;
					if (referencedColumn == null)
						referencedColumn = dynamicColumn.requestLocalObject(ReferencedColumn, false);
					// if the internal column reference is not a HierarchyColumnReference, initialize it now, then return it
					var hierarchyColumnReference:HierarchyColumnReference = referencedColumn.internalColumnReference as HierarchyColumnReference;
					if (hierarchyColumnReference == null)
						hierarchyColumnReference = referencedColumn.dynamicColumnReference.requestLocalObject(HierarchyColumnReference, false);
					
					if (hierarchyColumnReference != null)
					{
						// convert the multiDataSource path to a path for a column reference
						var path:XML = (selectedPath.category[0] as XML).copy();
						path.setName("hierarchy");
						var source:IDataSource = Weave.root.getObject(path.@dataSourceName) as IDataSource;
						var sourceName:String = path.@dataSourceName;
						delete path.@dataSourceName;
						
						// set both data source and path variables before allowing callbacks to run
						var cc:ICallbackCollection = getCallbackCollection(hierarchyColumnReference);
						cc.delayCallbacks();
						hierarchyColumnReference.dataSourceName.value = sourceName;
						hierarchyColumnReference.hierarchyPath.value = path;
						cc.resumeCallbacks();
					}
				}
			}
			
			private function get selectedPath():XML
			{
				return dimensionTreeView.selectedPath.value;
			}
			private function set selectedPath(value:XML):void
			{
				// avoid setting the path to null
				if (value != null)
					dimensionTreeView.selectedPath.value = value;
			}
			
			public const dynamicColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleDynamicColumnChange);
			
			/**
			 * This function gets called whenever the column reference changes.
			 */
			private function handleDynamicColumnChange():void
			{
				//TODO
				//dataSourceCombo.selectedLabel=columnReference.dataSourceName.value;
				//Alert.show(XMLEncoder.encode(getSessionState(columnReference),"a").toXMLString());
				var referencedColumn:ReferencedColumn = dynamicColumn.internalColumn as ReferencedColumn;
				if (referencedColumn == null)
					return; // do nothing if it is not a ReferencedColumn
				var hierarchyColumnReference:HierarchyColumnReference = referencedColumn.internalColumnReference as HierarchyColumnReference;
				if (hierarchyColumnReference == null)
					return; // do nothing if it is not a HierarchyColumnReference
				if (hierarchyColumnReference.hierarchyPath.value != null )
				{
					// convert the column reference path to a path in the multiDataSource.
					var path:XML =  hierarchyColumnReference.hierarchyPath.value.copy();
					path.@dataSourceName = hierarchyColumnReference.dataSourceName.value;
					path.setName("category");
					
					var parent:XML = <hierarchy/>;
					parent.appendChild(path);
					selectedPath = parent;
				}
			}
			
//			private function handleSearchKeyUp(event:KeyboardEvent):void
//			{
//				loadFilteredColumnNames();
//			}
//			
//			/** NOTE: this will only work for two level hierarchies -- needs to be improved to work for multiple levels.  
//			 * 		  What we want is if a category contains an indicator that has the search terms in it, we want to show
//			 *        that category as well.  But if the category contains a term and has no indicators inside it that also
//			 *        contain that term there is no need to show that category.
//			 **/
//			private function columnFilterFunction(item:Object):Boolean
//			{
//				// if this item contains the search query (not case sensitive), then return true;
//				var containsSearch:Boolean =  ( String(item.@name).toLowerCase().search(searchTerms.text.toLowerCase() ) >= 0);
//				
//				// if this xml contains the search and has no children (is an indicator), then return true
//				if(containsSearch && (item as XML).children().length() == 0)
//					return true;
//				
//				// otherwise search for the terms in the children of this item (which is a category because it has children)
//				return searchForTerms((item as XML).children());
//			}
//			private function searchForTerms(list:XMLList):Boolean
//			{
//				// go through each XML item in the list
//				for each(var item:XML in list)
//				{
//					// if this item has children, then it is a category, so recursively search through its children to see if they have the terms in it
//					if(item.children().length() > 0)
//					{
//						// if any of its children contain the term then we want to return true so that this category gets shown
//						return searchForTerms( item.children() );
//					}
//					
//					// if the item has no children, then it is an indicator, so see if its name contains the search query
//					if( String(item.@name).toLowerCase().search(searchTerms.text.toLowerCase() ) >= 0)
//						return true;	
//				} 
//				
//				// if we have gone through each item and not found the search terms, then return false, this set of children does not contain the term
//				return false;
//			}
			
			private function handleTimer(event:TimerEvent):void
			{
				dimensionTreeView.categoryFilter.value = searchCategoryTerms.text;
				dimensionTreeView.categoriesView.enabled = true;
				dimensionTreeView.attributesView.enabled = true;
			}
			
			private function loadFilteredAttributes():void
			{
				dimensionTreeView.attributeFilter.value = searchAttrTerms.text;
				
			}
			
			private var _timer:Timer = new Timer(400,1);
			private function loadFilteredCategories():void
			{
				dimensionTreeView.categoriesView.enabled = false;
				dimensionTreeView.attributesView.enabled = false;
				_timer.stop();
				_timer.start();
			}
			
			
			private function handleAttributeDrag(event:MouseEvent):void
			{
				//trace("handleAttributeDrag",event.target, event.currentTarget);
				
				var itemsArray:Array = new Array();
				itemsArray.push(dynamicColumn.internalColumn);
				
				var ds:DragSource = new DragSource();
				ds.addData(itemsArray,"items");
				
				var targetList:List = (event.currentTarget as List);
				if(targetList.dataProvider !=null)// && targetList.dropEnabled)
				{
					var selectedIndex:int = (event.currentTarget as List).selectedIndex;
					var dragInitiator:IUIComponent = (event.currentTarget as List).indexToItemRenderer(selectedIndex);
					if (dragInitiator)
						DragManager.doDrag(dragInitiator,ds,event);
				}
			}
			
			
		]]>
	</mx:Script>
</mx:VBox>
