<?xml version="1.0" encoding="utf-8"?>
<!--
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 borderColor="#54585E" borderThickness="3" borderStyle="solid"
		 backgroundAlpha="1" backgroundColor="#CCCCCC"
		 showEffect="{moveIn}" hideEffect="{moveOut}" xmlns:collab="weave.ui.collaboration.*">

	<mx:Move id="moveIn" duration="1000"
			 xFrom="{xFrom}" xTo="{xTo}"
			 yFrom="{yFrom}" yTo="{yTo}"/>
	<mx:Move id="moveOut" duration="1000"
			 xFrom="{xTo}" xTo="{xFrom}"
			 yFrom="{yTo}" yTo="{yFrom}"/>
	
	<mx:VBox width="100%" height="100%"
			 paddingBottom="{padding}" paddingLeft="{padding}"
			 paddingRight="{padding}" paddingTop="{padding}">
		<mx:VDividedBox width="100%" height="100%">
			<mx:VBox width="100%" horizontalScrollPolicy="off">
				<mx:Canvas id="camChatContainer" width="100%" height="100%" backgroundColor="#000000" />
				<mx:HBox id="addonControls" width="100%" horizontalAlign="left" horizontalScrollPolicy="off">
					<collab:CollaborationPing id="collabPing" width="35" height="20" ping="{ping}" />
					<mx:Spacer width="{addonControls.width/2 - holder.width/2 - collabPing.width - 14}" />
					<mx:HBox id="holder">
						<mx:Button id="button_mic" icon="{iconMic}" width="28" height="22" toggle="true" enabled="{addOnsSaved}"
								   click="toggleMic(event)"/>
						<mx:Button id="button_cam" icon="{iconCam}" width="28" height="22" toggle="true" enabled="{addOnsSaved}"
								   click="toggleCam(event)"/>
					</mx:HBox>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%">
				<mx:HDividedBox width="100%" height="100%" horizontalScrollPolicy="off">
					<mx:TextArea id="log" width="100%" height="100%" editable="false" />
					<mx:List id="userList" height="100%" labelField="name" minWidth="140">
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox width="100%" height="100%" horizontalScrollPolicy="off" paddingLeft="5" paddingRight="5">
									<mx:Script>
										<![CDATA[
											
											override public function set data(value:Object):void
											{
												if( outerDocument._userListInfo[value] != null )
												{
													color.setStyle("backgroundColor", 	outerDocument._userListInfo[value].color );
													micPic.visible 			= outerDocument._userListInfo[value].mic;
													micPic.includeInLayout 	= outerDocument._userListInfo[value].mic;
													camPic.visible			= outerDocument._userListInfo[value].cam;
													camPic.includeInLayout	= outerDocument._userListInfo[value].cam;
												}
												labelName.text = value as String;
												if( (value as String) == outerDocument.username )
													labelName.setStyle("fontWeight", "bold");
												else
													labelName.setStyle("fontWeight", "normal");
											}
											
										]]>
									</mx:Script>
									<mx:Canvas id="color" width="16" height="16" borderStyle="solid" 
											   cornerRadius="8" borderThickness="2"
											   borderColor="0"/>
									<mx:Canvas width="100%" clipContent="true" horizontalScrollPolicy="off">
										<mx:Label id="labelName" fontSize="12" width="100%" />
									</mx:Canvas>
									<mx:Image id="micPic" source="{outerDocument.iconMic}" width="15" height="15" />
									<mx:Image id="camPic" source="{outerDocument.iconCam}" width="15" height="15" />
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:List>
				</mx:HDividedBox>
				<mx:HBox width="100%">
					<mx:TextInput id="input" width="100%" enter="dispatchMessageEvent()" />
					<mx:Button id="button_send" label="Send" click="dispatchMessageEvent()" />
				</mx:HBox>
			</mx:VBox>
		</mx:VDividedBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.Sort;
			import mx.utils.StringUtil;
			
			import weave.services.collaboration.CollaborationEvent;
			
			[Bindable] public var xFrom:Number = 0;
			[Bindable] public var xTo:Number = 0;
			[Bindable] public var yFrom:Number = 0;
			[Bindable] public var yTo:Number = 0;
			[Bindable] public var unreadMessages:Number = 0;
			[Bindable] internal var _userListInfo:Dictionary  = new Dictionary();
			[Bindable] private var _users:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var padding:Number = 10;
			[Bindable] public var addOnsSaved:Boolean = false;
			[Bindable] public var ping:Number = -1;
			internal var username:String = null;
			
			public var cam:Camera;
			private var enabledMic:Boolean = false;
			public var mic:Microphone;
			private var enabledCam:Boolean = false;
			
			[Embed(source="../../resources/images/collab/mic.png")] internal const iconMic:Class;
			[Embed(source="../../resources/images/collab/cam.png")] internal const iconCam:Class;
			[Embed(source="../../resources/images/collab/speaker.png")] internal const iconSpeaker:Class;
			
			public function logText(txt:String):void
			{
				var from:String = txt.substr(0, txt.indexOf(":"));
				if( from && from == username )
					log.htmlText += "<font color='#FF0000'>"+txt+"<br>";
				else
					log.htmlText += "<font color='#0000FF'>"+txt +"<br>";
				
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
				if( !visible ) unreadMessages++;
			}
			private function dispatchMessageEvent():void
			{
				dispatchEvent(new CollaborationEvent(CollaborationEvent.SEND_MESSAGE, input.text));
				input.text = "";
			}
			public function setNickname(usrname:String):void
			{
				username = usrname;
			}
			public function set userNameList(array:ArrayCollection):void
			{
				userList.dataProvider = array;
			}
			private function toggleMic(e:MouseEvent):void
			{
				enabledMic = !enabledMic;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_MIC, ( enabledMic ) ? "1" : "0"));
				
				if( enabledMic )
				{
					// Do NetConnection stuff
				}
				else
				{
					// Do close of connection stuff
				}
			}
			private function toggleCam(e:MouseEvent):void
			{
				enabledCam = !enabledCam;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_CAM, ( enabledCam ) ? "1" : "0"));
				
				if( enabledCam )
				{
					// Do NetConnection stuff
				}
				else
				{
					// Do close of connection stuff
				}
			}
			public function setUserColor(name:String, color:uint):void
			{
				if( _userListInfo[name] == null )
				{
					var o:Object = new Object();
					o.color = color;
					_userListInfo[name] = o;
				} else
					_userListInfo[name].color = color;
				
				(userList.dataProvider as ICollectionView).refresh();
			}
			public function setUserMic(name:String, val:Boolean):void
			{
				if( _userListInfo[name] == null )
				{
					var o:Object = new Object();
					o.mic = val;
					_userListInfo[name] = o;
				} else
					_userListInfo[name].mic = val;
				
				(userList.dataProvider as ICollectionView).refresh();
			}
			public function setUserCam(name:String, val:Boolean):void
			{
				if( _userListInfo[name] == null )
				{
					var o:Object = new Object();
					o.cam = val;
					_userListInfo[name] = o;
				} else
					_userListInfo[name].cam = val;
				
				(userList.dataProvider as ICollectionView).refresh();
			}
		]]>
	</mx:Script>
</mx:Canvas>
