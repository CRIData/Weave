<?xml version="1.0" encoding="utf-8"?>
<!--
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
-->

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" height="25"
		 backgroundAlpha="0"
		 backgroundColor="0x8a8a8a"
		 cornerRadius="7"
		 bottom="0" horizontalGap="0"
		 verticalAlign="middle"
		 creationComplete="creationComplete(event)"
		 removed="onToolbarDestroy()" resize="resizeHandler(event)"
		 horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:Spacer width="100%" />
	<mx:Button id="button_connect"  label="Connect"  cornerRadius="0" icon="{iCon}" height="100%" />
	<mx:Button id="button_settings" label="Settings" cornerRadius="0" icon="{iSet}" height="100%" />
	<mx:Button id="button_chat"     label="Chat" 	 cornerRadius="0" icon="{iChat}" width="{this.width/2}" height="100%" />
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.registerDisposableChild;
			import weave.services.collaboration.CollaborationEvent;
			import weave.services.collaboration.CollaborationService;
			
			public const collabService:CollaborationService = registerDisposableChild(this, new CollaborationService(Weave.root));
			
			private var CHAT:CollaborationChatWindow = null;
			private var SETTINGS:CollaborationSettingsWindow = null;
			private var connTimer:Timer = null;
			
			[Embed(source="../../resources/images/connect2.png")] private var iCon:Class;
			[Embed(source="../../resources/images/settings.png")] private var iSet:Class;
			[Embed(source="../../resources/images/chat.png")]	  private var iChat:Class;
			
			protected function creationComplete(event:FlexEvent):void
			{
				trace("CollaborationMenuBar is opened");
				button_connect.enabled 	= false;
				button_chat.enabled 	= false;
				button_settings.enabled = true;

				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.RECONNECT_ERROR, reconnectError);
//				collabService.addEventListener(CollaborationEvent.USER_JOINED_CREATE_MOUSE, handleCreateUserMouse);
				collabService.addEventListener(CollaborationEvent.USER_LIST_UPDATED, userListUpdated);
				
				button_connect.addEventListener(MouseEvent.CLICK, connect);
				button_chat.addEventListener(MouseEvent.CLICK, toggleChat);
				button_settings.addEventListener(MouseEvent.CLICK, toggleSettings);
				stage.addEventListener(Event.RESIZE, resizeHandler);
				
				createWindowChat();
				createWindowSettings();
				
				SETTINGS.addEventListener(CollaborationEvent.CONN_SETTINGS_SAVED, settingsConnSaved);
				SETTINGS.addEventListener(CollaborationEvent.ADDON_SETTINGS_SAVED, settingsAddonSaved);
				CHAT.addEventListener(CollaborationEvent.SEND_MESSAGE, sendMessageEventHandler);
				
				resizeHandler();
			}
			private function onToolbarDestroy():void
			{
				trace("CollaborationMenuBar destroyed");
				
				if( collabService.isConnected ) disconnect();
				
				collabService.removeEventListener(CollaborationEvent.LOG, handleLogEvent);
				collabService.removeEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.removeEventListener(CollaborationEvent.CONNECT, handleConnect);
				
				button_connect.removeEventListener(MouseEvent.CLICK, connect);
				button_chat.removeEventListener(MouseEvent.CLICK, toggleChat);
				button_settings.removeEventListener(MouseEvent.CLICK, toggleSettings);
				stage.removeEventListener(Event.RESIZE, resizeHandler);
				
				destroyWindowChat();
				destroyWindowSettings();
				
				if( SETTINGS ) {
					SETTINGS.removeEventListener(CollaborationEvent.CONN_SETTINGS_SAVED, settingsConnSaved);
					SETTINGS.removeEventListener(CollaborationEvent.ADDON_SETTINGS_SAVED, settingsAddonSaved);
				}
				if( CHAT ) {
					CHAT.removeEventListener(CollaborationEvent.SEND_MESSAGE, sendMessageEventHandler);
				}
			}
			private function connect(e:MouseEvent = null):void
			{
				button_connect.label = "Connecting...";
				collabService.connect(SETTINGS.collab_SERVERIP, SETTINGS.collab_SERVERNAME, 
					int(SETTINGS.collab_PORT), SETTINGS.collab_ROOMTOJOIN, SETTINGS.collab_USERNAME);
				
				// Set timeout to 10 seconds
				connTimer = new Timer(10000);
				connTimer.addEventListener(TimerEvent.TIMER, serverUnresponsive);
				connTimer.start();
			}
			private function disconnect(e:MouseEvent = null):void
			{
				collabService.disconnect();
			}
			private function serverUnresponsive(e:TimerEvent):void
			{
				connTimer.stop();
				connTimer.removeEventListener(TimerEvent.TIMER, serverUnresponsive);
				connTimer = null;
				
				updateEnabledSettings();
				if( !SETTINGS.visible ) toggleSettings();
				SETTINGS.showConnectionWarning("Server not responding");
			}
			private function createWindowSettings():void
			{
				SETTINGS = PopUpManager.createPopUp(Application.application as Application, CollaborationSettingsWindow) as CollaborationSettingsWindow;
				SETTINGS.hide();
				var p:Point = new Point(button_settings.x + button_settings.width/2, button_settings.y);
				SETTINGS.x = localToGlobal(p).x - SETTINGS.width/2;
				SETTINGS.y = localToGlobal(p).y + button_settings.height;
			}
			private function createWindowChat():void
			{
				CHAT = PopUpManager.createPopUp(Application.application as Application, CollaborationChatWindow) as CollaborationChatWindow;
				CHAT.visible = false;
				var p:Point = new Point(button_chat.x, button_chat.y);
				CHAT.xFrom = localToGlobal(p).x;
				CHAT.xTo   = localToGlobal(p).x;
				CHAT.yFrom = localToGlobal(p).y + button_chat.height;
				CHAT.yTo   = localToGlobal(p).y - CHAT.height;
				CHAT.x     = localToGlobal(p).x;
				CHAT.y	 = localToGlobal(p).y + button_chat.height;
				CHAT.width = button_chat.width;
			}
			private function destroyWindowSettings():void
			{
				if( SETTINGS ) {
					PopUpManager.removePopUp(SETTINGS);
					SETTINGS = null;
				}
			}
			private function destroyWindowChat():void
			{
				if( CHAT ) {
					PopUpManager.removePopUp(CHAT);
					CHAT = null;
				}
			}
			private function toggleSettings(e:MouseEvent = null):void
			{
				if( SETTINGS ) 
					if( SETTINGS.visible )
						SETTINGS.hide();
					else
						SETTINGS.show();
				
				setWindowSettingsPos();
			}
			private function toggleChat(e:MouseEvent = null):void
			{
				if( CHAT )
				{
					CHAT.visible = ( CHAT.visible ) ? false : true;
					if( CHAT.visible ) {
						button_chat.label = "Chat";
						CHAT.unreadMessages = 0;
					}
				}
			}
			private function resizeHandler(event:Event = null):void
			{
				if( SETTINGS ) setWindowSettingsPos();
				if( CHAT )     setWindowChatPos();
			}
			
			private function setWindowSettingsPos():void 
			{
				var p:Point = new Point(button_settings.x + button_settings.width/2, button_settings.y);
				SETTINGS.x = localToGlobal(p).x - (SETTINGS.width/2);
				if( SETTINGS.visible )
					SETTINGS.y = localToGlobal(p).y - SETTINGS.height;
				else
					SETTINGS.y = localToGlobal(p).y + button_settings.height;
			}
			private function setWindowChatPos():void
			{
				var p:Point = new Point(button_chat.x, button_chat.y);
				CHAT.x 	 = localToGlobal(p).x;
				CHAT.xFrom = localToGlobal(p).x;
				CHAT.xTo   = localToGlobal(p).x;
				CHAT.width = button_chat.width;
				CHAT.height= stage.stageHeight/2;
				CHAT.yFrom = localToGlobal(p).y + button_chat.height;
				CHAT.yTo   = localToGlobal(p).y - CHAT.height;
				if( CHAT.visible )
					CHAT.y = localToGlobal(p).y - CHAT.height;
				else
					CHAT.y = localToGlobal(p).y + button_chat.height;
			}
			private function settingsConnSaved(e:Event):void
			{
				button_connect.enabled = true;
			}
			private function settingsAddonSaved(e:Event):void
			{
				
			}
			private function sendMessageEventHandler(e:CollaborationEvent):void
			{
				collabService.sendTextMessage( e.getText() );
			}
			private function handleLogEvent(e:CollaborationEvent):void
			{
				trace("Text:",e.getText());
				trace("From:",e.getFrom());
				CHAT.logText(e.getText());
				if( !CHAT.visible && collabService.isConnected ) {
					button_chat.label = "Chat [" + CHAT.unreadMessages + "]";
				} else {
					button_chat.label = "Chat";
					CHAT.unreadMessages = 0;
				}
			}
			
			//If the collabService is disconnected for some reason, this ensures the collabUI
			//resets which buttons are disabled and enabled.
			private function handleDisconnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleConnect( e:CollaborationEvent):void
			{
				if( connTimer ) {
					connTimer.stop();
					connTimer.removeEventListener(TimerEvent.TIMER, serverUnresponsive);
					connTimer = null;
				}	
				updateEnabledSettings();
				toggleChat();
				CHAT.setUsername(collabService.username);
			}
			private function lockedError(e:Event):void
			{
				if( !SETTINGS.visible ) toggleSettings();
				SETTINGS.showConnectionWarning("Server is locked");
			}
			private function nickConflictError(e:Event):void
			{
				collabService.disconnect();
				if( !SETTINGS.visible ) toggleSettings();
				SETTINGS.showConnectionWarning("Username already exists");
			}
			private function reconnectError(e:Event):void
			{
				connect();
			}
			private function userListUpdated(e:Event):void
			{
				CHAT.userList = collabService.userList;
			}
			private function updateEnabledSettings():void
			{
				if( collabService.isConnected ) {
					button_connect.label = "Disconnect";
					button_connect.removeEventListener(MouseEvent.CLICK, connect);
					button_connect.addEventListener(MouseEvent.CLICK, disconnect);
//					button_connect.setStyle("icon", iDis);
					button_chat.enabled = true;
				} else {
					button_connect.label = "Connect";
					button_connect.removeEventListener(MouseEvent.CLICK, disconnect);
					button_connect.addEventListener(MouseEvent.CLICK, connect);
//					button_connect.setStyle("icon", iCon);
					button_chat.enabled = false;
					if( CHAT.visible ) toggleChat();
				}
			}
		]]>
	</mx:Script>
</mx:HBox>
