<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!--

@abaumann
@skolman
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 width="100%" height="30"
		 verticalAlign="middle" implements="weave.api.core.ILinkableObject"
		 horizontalGap="2">
	<!--<ConnectionComponent id="connComponent"/>-->
	<mx:Label text="{label}" fontWeight="bold" minWidth="64"/>
	<LinkableObjectList id="internalList" 
						variableRowHeight="false"
			 
		 				doubleClickEnabled="true" 
		 				doubleClick="openAttributeSelector()"
		 				width="100%" rowCount="1" height="25"/>
	<mx:Image source="@Embed(source='/weave/resources/images/folder.png')" buttonMode="true"
		       toolTip="Click here to select the column used for this property."
			   click="openAttributeSelector()"/>
			   
	<mx:Image source="@Embed(source='/weave/resources/images/trashCan.png')" buttonMode="true"
			   click="clearAttribute()"
			   toolTip="Click here to remove the column used for this property."/>
	
	<mx:VBox verticalGap="0" horizontalAlign="right"
			 
			 
			 						visible="false" includeInLayout="false"
			 
			
			>
		<mx:Image id="linkButton" buttonMode="true"
				   click="updateLinkDropDown(!linkDropDown.visible);"/>
		<mx:VBox id="linkDropDown" verticalGap="0" horizontalAlign="right" includeInLayout="false" borderStyle="outset" visible="false">
			<mx:HBox horizontalGap="0">
				<TextInputWithPrompt id="linkName" prompt="Enter a name" toolTip="Enter the name of a new or existing global object to link."
									 enter="linkTo(StringUtil.trim(linkName.text));"/>
				<mx:Button label="Link" click="linkTo(StringUtil.trim(linkName.text));"/>
			</mx:HBox>
			<mx:List id="linkList" borderStyle="outset" width="100%"
					 change="if (linkDropDown.visible) linkTo(linkList.selectedItem as String);"/>
			<mx:Button label="Unlink" click="linkTo(null);"/>
		</mx:VBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.visualization.tools.SimpleVisTool;
			
			[Embed(source='/weave/resources/images/plug-connected.png')]
			private static const icon_connected:Class;
			[Embed(source='/weave/resources/images/plug-disconnected.png')]
			private static const icon_disconnected:Class;
			
			[Inspectable]
			public function set dynamicObject(value:ILinkableDynamicObject):void
			{
				if (internalList.dynamicObject)
					getCallbackCollection(internalList.dynamicObject).removeCallback(updateLinkDropDown);
				
				internalList.dynamicObject = value;
				
				if (value)
					getCallbackCollection(value).addImmediateCallback(this, updateLinkDropDown, null, true);
			}
			
			private var _visTool:SimpleVisTool = null;
			[Inspectable]
			public function set visTool(value:SimpleVisTool):void
			{
				_visTool = value;
			}
			
			private function openAttributeSelector():void
			{
				if (_visTool)
					AttributeSelectorPanel.openToolSelector(_visTool, internalList.dynamicObject);
				else
					AttributeSelectorPanel.openDefaultSelector(internalList.dynamicObject, label);
			}
			
			private function clearAttribute():void
			{
				var dc:DynamicColumn = AttributeSelectorPanel.hack_findInternalDynamicColumn(internalList.dynamicObject as DynamicColumn);
				if (dc)
					dc.removeObject();
			}
			
			private function updateLinkDropDown(visible:Boolean = false):void
			{
				if (internalList.dynamicObject.globalName)
					linkButton.source = icon_connected;
				else
					linkButton.source = icon_disconnected;
				linkDropDown.visible = visible;
				linkList.dataProvider = Weave.root.getNames(IAttributeColumn);
				linkList.selectedItem = internalList.dynamicObject.globalName;
				linkName.text = internalList.dynamicObject.globalName;
			}
			
			private function linkTo(globalName:String):void
			{
				internalList.dynamicObject.globalName = globalName;
				updateLinkDropDown();
			}
		]]>
	</mx:Script>
</mx:HBox>
