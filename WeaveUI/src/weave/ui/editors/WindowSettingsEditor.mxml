<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" label="Window Settings"
	creationPolicy="all" xmlns:ui="weave.ui.*">
	<mx:HBox width="100%">
		<mx:Label width="{_labelWidth}" text="Window title:"/>
		<mx:TextInput id="titleInput"
					  width="100%"
					  toolTip="Entering a title here will override the automatic title generated by the tool."
					  initialize="EventUtils.delayedLinkBindableProperty(_panel.panelTitle, titleInput, 'text');"/>
	</mx:HBox>
	<mx:HBox enabled="{_panel is SimpleVisTool}" visible="{_panel is SimpleVisTool}"  width="100%" id="marginProperties" verticalAlign="middle">
		<mx:Label width="{_labelWidth}" text="Axis margins:"/>
		
		<mx:NumericStepper id="marginLeft" toolTip="Enter a number of pixels to use for the left margin"
						   minimum="0" maximum="200" stepSize="5"
						   initialize="linkBindableProperty((_panel as SimpleVisTool).visualization.marginLeft, event.target, 'value');"/>
		<mx:VBox>
			<mx:NumericStepper id="marginTop" toolTip="Enter a number of pixels to use for the top margin"
							   minimum="0" maximum="200" stepSize="5"
							   initialize="linkBindableProperty((_panel as SimpleVisTool).visualization.marginTop, event.target, 'value');"/>
			<mx:NumericStepper id="marginBottom" toolTip="Enter a number of pixels to use for the bottom margin"
							   minimum="0" maximum="200" stepSize="5"
							   initialize="linkBindableProperty((_panel as SimpleVisTool).visualization.marginBottom, event.target, 'value');"/>
		</mx:VBox>
		<mx:NumericStepper id="marginRight" toolTip="Enter a number of pixels to use for the right margin"
						   minimum="0" maximum="200" stepSize="5"
						   initialize="linkBindableProperty((_panel as SimpleVisTool).visualization.marginRight, event.target, 'value');"/>
	</mx:HBox>
	<mx:HBox
			width="100%"
			borderStyle="solid"
			paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5" cornerRadius="5">
		<mx:VBox width="100%" height="100%">
			<mx:CheckBox label="Show borders" toolTip="Selecting this option will turn the borders of this tool on or off"
						 initialize="linkBindableProperty(_panel.enableBorders, event.target, 'selected');"/>
			<mx:CheckBox id="enableTitle" label="Show visualization title" toolTip="Selecting this option will turn the title of this tool on or off"
						 enabled="{_panel is SimpleVisTool}"
						 visible="{_panel is SimpleVisTool}"
						 initialize="linkBindableProperty((_panel as SimpleVisTool).enableTitle, event.target, 'selected');"/>
			<mx:CheckBox label="Allow dragging" toolTip="Selecting this option will enable the user to move the tool by clicking on the header and dragging"
						 initialize="linkBindableProperty(_panel.draggable, event.target, 'selected')"/>
			<mx:CheckBox label="Allow resizing" toolTip="Selecting will enable the user to resize this tool" 
						 initialize="linkBindableProperty(_panel.resizeable, event.target, 'selected')"/>
		</mx:VBox>
		<mx:VBox width="100%" height="100%">
			<mx:CheckBox label="Allow pinning to back" toolTip="Selecting this option will enable the user to pin this tool to the back of the stage"
						 initialize="linkBindableProperty(_panel.pinnableToBack, event.target, 'selected')"/>
			<mx:CheckBox label="Allow pinning" toolTip="Selecting this option will enable the user to pin this tool"
						 initialize="linkBindableProperty(_panel.pinnable, event.target, 'selected')"/>
			<mx:CheckBox label="Allow minimization" toolTip="Selecting this option will enable the user to minimize this tool"
						 initialize="linkBindableProperty(_panel.minimizable, event.target, 'selected')"/>
			<mx:CheckBox label="Allow maximization" toolTip="Selecting this option will enable the user to maximize this tool"
						 initialize="linkBindableProperty(_panel.maximizable, event.target,'selected');"/>
			<mx:CheckBox label="Allow closing" toolTip="Selecting or deselecting this option will enable or disable the user to close this tool"
						 initialize="linkBindableProperty(_panel.closeable, event.target, 'selected')"/>
		</mx:VBox>
	</mx:HBox>

	<mx:VBox borderStyle="solid"
			 paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="5"
			 backgroundAlpha="0.8" backgroundColor="white"
			 id="visBackgroundProperties" cornerRadius="5"
			 width="100%">
		
		<mx:HBox>
			<mx:ColorPicker id="borderColorPicker"
							toolTip="Select a color for the border of this visualization - this will have no effect if the border is not enabled"
							change="borderColorPicked();"/>
			<mx:Label text="Border color"/>
			<mx:Button label="Reset" click="_panel.panelBorderColor.value = NaN;"/>
		</mx:HBox>
		<mx:HBox visible="{backgroundColorEnabled}">
			<mx:ColorPicker toolTip="Select a color for the background of this visualization tool." 
							id="backgroundColorPicker"
							change="backgroundColorPicked();"/>
			<mx:Label text="Background color"/>
			<mx:Button label="Reset" click="_panel.panelBackgroundColor.value = NaN;"/>
		</mx:HBox>
		<!--<mx:HBox>
		<mx:ColorPicker id="axisColorPicker"
		toolTip="Select a color for the axis of this visualization."/>
		<mx:Label text="Axis Color"
		fontWeight="bold" 
		fontSize="12"/>
		</mx:HBox>	
		<mx:HBox horizontalAlign="center" 
		width="100%">
		<mx:Label text="Title Font" fontWeight="bold" fontSize="12" />
		</mx:HBox>
		<settings:FontControl id="toolTitleFont"/> -->
	</mx:VBox>	

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import weave.api.linkBindableProperty;
			import weave.core.SessionManager;
			import weave.ui.DraggablePanel;
			import weave.utils.EventUtils;
			import weave.visualization.tools.SimpleVisTool;

			private static const _labelWidth:int = 100;
			
			[Bindable]
			private var _panel:DraggablePanel = null;
			
			[Inspectable][Bindable]
			public var backgroundColorEnabled:Boolean = true;
			
			public function set targetTool(value:SimpleVisTool):void
			{
				if (_panel != value && _panel != null)
					throw new Error("UserWindowSettings.targetTool should not be set more than once");
				
				_panel = value;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				var tool:SimpleVisTool = _panel as SimpleVisTool;
				if(tool)
				{
					linkBindableProperty(tool.enableTitle, enableTitle, 'selected');
					linkBindableProperty(tool.visualization.marginLeft, marginLeft, 'value');
					linkBindableProperty(tool.visualization.marginTop, marginTop, 'value');
					linkBindableProperty(tool.visualization.marginBottom, marginBottom, 'value');
					linkBindableProperty(tool.visualization.marginRight, marginRight, 'value');
				}
				_panel.panelBorderColor.addGroupedCallback(this, borderColorCallback, true);
				_panel.panelBackgroundColor.addGroupedCallback(this, backgroundColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { borderColorCallback(); backgroundColorCallback(); });
			}
			
			private function borderColorCallback():void
			{
				borderColorPicker.selectedColor = _panel.getStyle('borderColor');
			}
			private function borderColorPicked():void
			{
				_panel.panelBorderColor.value = borderColorPicker.selectedColor;
			}
			
			
			private function backgroundColorCallback():void
			{
				backgroundColorPicker.selectedColor = _panel.getStyle('backgroundColor');
			}
			private function backgroundColorPicked():void
			{
				_panel.panelBackgroundColor.value = backgroundColorPicker.selectedColor;
			}
		]]>
	</mx:Script>
</mx:VBox>
