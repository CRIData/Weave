<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--	Session State Editor
   	*  @author skolman
    *  @author kmonico
 	*  A text editor to change the Session State on the fly.
-->
<!--
    TODO: This class has many if else statements depending on the type of editor. It's probably a
    better idea to create some new state object whose states are either TextArea or DataGrid instead
    of the implementation below. 
-->
<ui:DraggablePanel
    xmlns:ui ="weave.ui.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    width="800" height="600"
    title="Session State Editor"
	backgroundColor="#EFF4BC" 
    xmlns:sessioning="weave.core.*">

    <mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%"
			 paddingBottom="5" paddingTop="5" paddingRight="5" paddingLeft="5">
		<mx:HBox width="100%">
			<mx:Button label="Reload" toolTip="Reloads to previous save state" click="handleReloadClick()" paddingLeft="5" paddingRight="5"/>
			<mx:Button label="Apply" click="handleApplyClick()" paddingLeft="5" paddingRight="5"/>
			<mx:Button label="Save &amp; Close" click="saveAndClosePanel()" paddingLeft="5" paddingRight="5"/>
			<mx:Button label="Cancel" click="removePanel()" paddingLeft="5" paddingRight="5"/>
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%">
			<mx:VBox id="listVBox" width="100%" height="100%">
				<!--<mx:Label paddingTop="5" fontWeight="bold" text="Object Hierarchy"/>-->
				<!--<CustomComboBox maxWidth="{listVBox.width}" id="sessionObjectTypeComboBox" toolTip="select filter to list by session object type" change="handleSessionObjectTypeFilterSelect(event)"/>-->
 				<ui:SessionNavigator id="sessionNav" height="100%" horizontalScrollPolicy="auto" width="100%"/>
 				<mx:HBox width="100%" id="linkControls" horizontalScrollPolicy="off">
 					<mx:TextInput id="linkNameInput" width="100%"/>
 					<mx:Button label="Link to global object" click="linkSelectedObject();"/>
 					<mx:Button label="Unlink" click="linkNameInput.text = ''; linkSelectedObject();"/>
 				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" id="editorBox">
				<mx:HBox width="100%" horizontalAlign="right">
					<ui:TextInputWithPrompt id="search" prompt="Enter search text" enter="highlightSearchText()" change="searchTermChanged()" width="100%" minWidth="100"/>
					<mx:Button label="Search" click="highlightSearchText()" repeatDelay="1"/>
				</mx:HBox>
				<mx:TextArea id="sessionStateTextArea" wordWrap="false" enabled="false" focusIn="handleTextAreaFocusIn()" fontAntiAliasType="normal" fontSize="11" 
							 fontFamily="Courier New" change="handleTextAreaChange()" width="100%" height="100%" visible="true"/>
				
				<mx:DataGrid id="sessionStateDataGrid" wordWrap="false" enabled="true" editable="true" focusIn="handleDataGridFocusIn()" fontAntiAliasType="normal" fontSize="11"
							 fontFamily="Courier New" change="handleDataGridChange()" width="100%" height="100%" verticalScrollPolicy="auto" 
							 horizontalScrollPolicy="auto" visible="true" variableRowHeight="false" rowHeight="24">
					<mx:columns>
						<mx:DataGridColumn dataField="Name" headerText="Name" editable="false"/>
						<mx:DataGridColumn dataField="Value" headerText="Value"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:Button id="toggleView" label="Toggle View" click="handleToggleViewClick()" toolTip="Click this button to switch the view of the session state."/>
			</mx:VBox>
		</mx:HDividedBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import com.as3xls.xls.formula.Functions;
			
			import mx.collections.ArrayCollection;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.core.Application;
			import mx.core.mx_internal;
			import mx.effects.Resize;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.WeaveProperties;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.core.ILinkableVariable;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableObjectOwner;
			import weave.api.getSessionState;
			import weave.api.linkBindableProperty;
			import weave.api.setSessionState;
			import weave.core.DynamicState;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.core.WeaveXMLDecoder;
			import weave.core.WeaveXMLEncoder;
			import weave.core.weave_internal;
			import weave.ui.colormap.*;
			import weave.utils.DebugUtils;
			import weave.utils.EventUtils;
			import weave.utils.NumberUtils;
			import weave.utils.PopUpUtils;
			import weave.utils.VectorUtils;
			use namespace weave_internal;

		    private var selectors:Array = null;
		    
			override protected function constructor():void
			{
				super.constructor();
				panelWidth.value = "75%";
				panelHeight.value = "75%";
				panelX.value = "12.5%";
				panelY.value = "12.5%";
			}			
			
			private var _viewEditor:String = DATA_GRID;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				refreshTimer.addEventListener(TimerEvent.TIMER, handleRefreshTimer);
				refreshTimer.start();
				
				//handle keyboard event CTRL +F to Search Box
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleCtrlFPressEvent)

		    	EventUtils.addBindCallback(sessionNav, "selectedItem", handleSessionNavSelect);
		    	
				sessionNav.addEventListener(KeyboardEvent.KEY_UP, confirmDeleteSelectedItem);
				
				var editor:String = _viewEditor;
				if (editor == TEXT_EDITOR)
				{
					editorBox.removeChild(sessionStateDataGrid);0
					editorBox.addChildAt(sessionStateTextArea, editorBox.numChildren - 2);
					sessionStateTextArea.visible = true;
					sessionStateTextArea.enabled = true;
				}
				else if (editor == DATA_GRID)
				{
					editorBox.removeChild(sessionStateTextArea);
					editorBox.addChildAt(sessionStateDataGrid, editorBox.numChildren - 2);
					sessionStateDataGrid.visible = true;
					sessionStateDataGrid.enabled = true;
				}
				loadSelectedSessionObjectInView();
				
		    }
			
			override public function dispose():void
			{
				refreshTimer.stop();
				EventUtils.removeBindCallback(sessionNav, "selectedItem", handleSessionNavSelect);
				super.dispose();
			}
		    
			/**
			 * refresh timer
			 */
		    private var _needRefresh:Boolean = false;
		    private const refreshTimer:Timer = new Timer(200, 0);
		    private function handleRefreshTimer(event:TimerEvent):void
		    {
		    	if (autoRefresh && _needRefresh && !_textModified && visible && parent)
				{
					autoRefresh = false; // this prevents text from refreshing every time -- we only want it to refresh when text area gains focus.
		    		loadSelectedSessionObjectInView();
				}
		    }
		    private function handleSelectedObjectGroupCallback():void
		    {
		    	_needRefresh = true;
		    }
			
			private function handleTextAreaFocusIn():void
			{
				autoRefresh = true;
			}
			
			private var autoRefresh:Boolean = false;
   
		    private var _textModified:Boolean = false
		    private function handleTextAreaChange():void
		    {
		    	_textModified = true;
		    }
		    
			private function askToSave():void
			{
				if (_textModified == false)
					return;
				
				_textModified = false;
				var functionSave:Function = function():void { saveAndLoadNewItem(); sessionNav.refresh(); };
				var functionDontSave:Function = function():void { loadSelectedSessionObjectInView(); sessionNav.refresh(); };
				PopUpUtils.confirm(
					this,
					"Save",
					"Session state has been changed.  Save Changes?",
					functionSave,
					functionDontSave
				);
			}
			
			private function refreshAndLoadSessionState():void
			{
				askToSave(); // ask the user to save and set _textModified to false
			}
			
			private var _prevSelectedObject:ILinkableObject = null;
			
			private function loadSelectedSessionObjectInView(sessObj:ILinkableObject = null):void
			{
				if (sessionStateDataGrid.visible == false && sessionStateTextArea.visible == false)
					return;
				
				_needRefresh = false;

				if (sessionNav.selectedItem == null && sessObj == null)
				{
					clearAndDisableView();
					return;
				}

				enableView();
				if(sessObj != null)
					_currentSelectedObject = sessObj;
				else
					_currentSelectedObject = sessionNav.selectedItem.object;

				loadSessionStateInView();
				_textModified = false;
			}

		    private function linkSelectedObject():void
		    {
				var dynamicObject:ILinkableDynamicObject = sessionNav.getSelectedSessionedObject() as ILinkableDynamicObject;
		    	if (dynamicObject)
		    	{
		    		dynamicObject.globalName = linkNameInput.text.length > 0 ? linkNameInput.text : null;
		    		refreshAndLoadSessionState();
		    	}
		    }
			private function handleSessionNavSelect():void
			{
				var dynamicObject:ILinkableDynamicObject = sessionNav.getSelectedSessionedObject() as ILinkableDynamicObject;
				if (dynamicObject)
				{
					linkNameInput.text = dynamicObject.globalName;
					linkControls.enabled = true;
				}
				else
				{
					linkNameInput.text = '';
					linkControls.enabled = false;
				}
				
				if(_textModified)
					askToSave();
				else
					loadSelectedSessionObjectInView();
			}
			
			private function saveAndLoadNewItem():void
			{
				saveSessionState();
				refreshAndLoadSessionState();
			}
			
		    private function alertError(e:Error):void
		    {
		    	PopUpUtils.confirm(
		    			this,
		    			e.name,
		    			e.message+"\n\n"+"Show stack trace?",
		    			function():void { Alert.show(e.message+"\n\n"+e.getStackTrace(), e.name); }
		    		);
		    }
		    
		    private function handleReloadClick():void
		    {
	    		refreshAndLoadSessionState();
		    }
		    private function handleApplyClick():void
		    {
		    	try {
			    	saveSessionState();
			    	refreshAndLoadSessionState();
				} catch (e:Error) { alertError(e); }
		    }
		    
		    private function saveAndClosePanel():void
		    {
		    	try {
					saveSessionState();
					super.removePanel();
				} catch (e:Error) { alertError(e); }
		    }
			
			override public function removePanel():void
			{
				if (_textModified)
				{
					PopUpUtils.confirm(
							this,
							"Save",
							"Session state has been changed.  Save Changes?",
							saveAndClosePanel,
							super.removePanel
						);
				}
				else
					super.removePanel();
			}

			
			private var _startSearchIndex:int = 0;
			private function highlightSearchText():Boolean
			{
				if (_viewEditor == TEXT_EDITOR)
				{
					// search through the text
					for (var i:int = 0; i < 2; i++) // 
					{
						var text:String = sessionStateTextArea.text;
						var searchTerm:String = search.text;
						
						_startSearchIndex = text.toLowerCase().indexOf(searchTerm.toLowerCase(), _startSearchIndex + 1); // +1 so it won't find the same thing twice 
						if (_startSearchIndex >= 0)
						{
							sessionStateTextArea.setSelection(_startSearchIndex, _startSearchIndex+searchTerm.length);
							sessionStateTextArea.setFocus();
							return true;
						}
						//end of file reached. start search again.
					}
				}
				else if (_viewEditor == DATA_GRID)
				{
					// search through the rows of the dataProvider
				}
				
				Alert.show("Not found: "+searchTerm, "Search");
				return false;
			}
			
			private function searchTermChanged():void
			{
				_startSearchIndex = -1;
			}
			
			private function handleCtrlFPressEvent(event:KeyboardEvent):void
			{
				if (event.ctrlKey && event.keyCode == 70)
				{
					search.setFocus();
				}
			}
			
			private function setLabelName(item:Object):String
			{
				var node:XML = XML(item);
				
				if(node.@name.toString() != "")
					return node.@name.toString();
				else
					return node.name().toString();
			}
			private function confirmDeleteSelectedItem(event:KeyboardEvent):void
			{
				if(event.keyCode == 46)
				{
					var parent:ILinkableObject = getLinkableObjectOwner(sessionNav.selectedItem.object);
					if (!parent)
						return;
					var hashMap:ILinkableHashMap = parent as ILinkableHashMap;
					var dynamicObject:ILinkableDynamicObject = parent as ILinkableDynamicObject;
					if (hashMap || dynamicObject)
						Alert.show("Delete Selected Item?","Confirm Delete",mx.controls.Alert.YES| mx.controls.Alert.NO,this,deleteSelectedItem)
				}
			}
			
			private function deleteSelectedItem(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					var parent:ILinkableObject = getLinkableObjectOwner(sessionNav.selectedItem.object);
					if (!parent)
						return;
					var hashMap:ILinkableHashMap = parent as ILinkableHashMap;
					var dynamicObject:ILinkableDynamicObject = parent as ILinkableDynamicObject;
					
					var oldObject:ILinkableObject = sessionNav.selectedItem.object;
					if(hashMap)
						hashMap.removeObject(hashMap.getName(oldObject));
					else if (dynamicObject)
						dynamicObject.removeObject();
					
					if ((WeaveAPI.SessionManager as SessionManager).objectWasDisposed(oldObject))
						refreshAndLoadSessionState();
					else
						Alert.show("Object is locked and cannot be deleted.", "Delete Failed");
				}
			}

			private function handleDataGridFocusIn():void
			{
				autoRefresh = true;
			}
			
			private function handleDataGridChange():void
			{
				_textModified = true;
			}

			private function handleToggleViewClick():void
			{
				var oldValue:String = _viewEditor;
				if (oldValue == TEXT_EDITOR)
				{
					//toggleView.label = "Text Editor View";
					_viewEditor = DATA_GRID;
					editorBox.removeChild(sessionStateTextArea);
					editorBox.addChildAt(sessionStateDataGrid, editorBox.numChildren - 1);
					
					sessionStateTextArea.enabled = false;
					sessionStateTextArea.editable = false;
					sessionStateTextArea.visible = false;

					sessionStateDataGrid.enabled = true;
					sessionStateDataGrid.editable = true;
					sessionStateDataGrid.visible = true;
					

				}
				else if (oldValue == DATA_GRID)
				{
					//toggleView.label = "Data Grid View";
					_viewEditor = TEXT_EDITOR;
					editorBox.removeChild(sessionStateDataGrid);
					editorBox.addChildAt(sessionStateTextArea, editorBox.numChildren - 1);
					
					sessionStateTextArea.enabled = true;
					sessionStateTextArea.editable = true;
					sessionStateTextArea.visible = true;

					sessionStateDataGrid.enabled = false;
					sessionStateDataGrid.editable = false;
					sessionStateDataGrid.visible = false;
				}
				loadSelectedSessionObjectInView();
			}
			
			private function clearAndDisableView():void
			{
				if (_viewEditor == TEXT_EDITOR)
				{
					sessionStateTextArea.text = '';
					sessionStateTextArea.enabled = false;
				}
				else if (_viewEditor == DATA_GRID)
				{
					sessionStateDataGrid.dataProvider = [ {Name: '', Value: ''} ];
					sessionStateDataGrid.enabled = false;
				}
			}
			private function enableView():void
			{
				if (_viewEditor == TEXT_EDITOR)
				{
					sessionStateTextArea.text = '';
					sessionStateTextArea.enabled = true;
					sessionStateTextArea.visible = true;
				}
				else if (_viewEditor == DATA_GRID)
				{
					sessionStateDataGrid.dataProvider = [ {Name: '', Value: ''} ];
					sessionStateDataGrid.enabled = true;
					sessionStateDataGrid.visible = true;
				}
			}
			
			public static const TEXT_EDITOR:String = "TEXT_EDITOR";
			public static const DATA_GRID:String = "DATA_GRID";
			private function loadSessionStateInView():void
			{
				var sessionState:Object = _currentSelectedObject ? getSessionState(_currentSelectedObject) : null;
				if (_prevSelectedObject != _currentSelectedObject)
				{
					if (_prevSelectedObject)
						getCallbackCollection(_prevSelectedObject).removeCallback(handleSelectedObjectGroupCallback);
					_prevSelectedObject = _currentSelectedObject;
					if (_currentSelectedObject)
						getCallbackCollection(_currentSelectedObject).addGroupedCallback(this, handleSelectedObjectGroupCallback);
					hsp = 0;
					vsp = 0;
				}

				if (_viewEditor == TEXT_EDITOR)
				{
					var vsp:Number = sessionStateTextArea.verticalScrollPosition;
					var hsp:Number = sessionStateTextArea.horizontalScrollPosition;

					_currentSessionStateXML = WeaveXMLEncoder.encode(sessionState,"Tag");
					sessionStateTextArea.text = _currentSessionStateXML.children().toXMLString();
					sessionStateTextArea.enabled = true;
					sessionStateTextArea.validateNow();
					sessionStateTextArea.verticalScrollPosition = vsp;
					sessionStateTextArea.horizontalScrollPosition = hsp;
				}
				else if (_viewEditor == DATA_GRID)
				{
					// if the object is a single ILinkableVariable
					if (_currentSelectedObject is ILinkableVariable)
					{
						var value:Object = (_currentSelectedObject as ILinkableVariable).getSessionState();
						if (value === null) // strict equality check to avoid casting 0, false, or '' to values of 0 (equal to null)
							value = '';
						sessionStateDataGrid.dataProvider = [ {Name: sessionNav.selectedItem.label || '', Value: value.toString() } ];
						return;
					} 
					
					// the object isn't a single variable -- check the properties
					// there are two possibilities for the sessionState's contents
					// 1) The objects returned from getClassInfo().properties are QName objects
					// 2) Or the objects are just the array indices, which means the sessionState has dynamic states
					var dataGridProvider:ArrayCollection = new ArrayCollection();
					var propertiesArray:Array = ObjectUtil.getClassInfo(sessionState).properties;
					for (var iProperty:int = 0; iProperty < propertiesArray.length; ++iProperty)
					{
						var key:Object = propertiesArray[iProperty];
						var propertyString:String;
						var sessionedProperty:Object; 
						
						if (key is QName)
						{
							var qKey:QName = key as QName;
							propertyString = qKey.localName;
							sessionedProperty = sessionState[propertyString];
						}
						else
						{
							var dynamicStateKey:DynamicState = sessionState[iProperty] as DynamicState;
							propertyString = dynamicStateKey.objectName;
							sessionedProperty = dynamicStateKey.sessionState; 
							
							//trace(dynamicStateKey.objectName, dynamicStateKey.className, typeof(sessionedProperty), sessionedProperty);
						}
						
						// the property may be an arbitrary object, but it's better to show it anyway because this shows
						// many of properties we want to see
						if (sessionedProperty == null)
							sessionedProperty = '';

						switch (typeof(sessionedProperty))
						{
							case "object":
								if (!(sessionedProperty is Array))
									break;
								
								// we want each element in the array to be a simple object
								if (!arrayHasSimpleContents(sessionedProperty as Array))
									break;
							case "boolean":
							case "number":
							case "string":
							case "xml":
								dataGridProvider.addItem( {Name: propertyString || '', Value: sessionedProperty.toString() } );
								break;
							default:
								break;
						}
					}
					_currentSessionStateDataProvider = dataGridProvider;
					sessionStateDataGrid.dataProvider = dataGridProvider;
					sessionStateDataGrid.enabled = true;
					sessionStateDataGrid.editable = true;
					sessionStateDataGrid.validateNow();
				}
			}
			
			
			private var _currentSelectedObject:ILinkableObject = null;
			private var _currentSessionStateXML:XML = null;
			private var _currentSessionStateDataProvider:ArrayCollection = null; 
			private function saveSessionState():void
		    {
				_textModified = false;
				
				if (_currentSelectedObject != null)
				{
					if (_viewEditor == TEXT_EDITOR && _currentSessionStateXML != null)
					{
						_currentSessionStateXML.setChildren(XMLList(sessionStateTextArea.text));
						
						var decodedStateObject:Object = WeaveXMLDecoder.decode(_currentSessionStateXML);
						
						setSessionState(_currentSelectedObject, decodedStateObject, true);
					}
					else if (_viewEditor == DATA_GRID && _currentSessionStateDataProvider != null)
					{
						var newSessionState:Object;
						var i:int, j:int;
						
						_currentSessionStateDataProvider = sessionStateDataGrid.dataProvider as ArrayCollection;
						
						
						
						// special case of just one object to set
						if (_currentSelectedObject is ILinkableVariable && _currentSessionStateDataProvider.length == 1)
						{
							newSessionState = _currentSessionStateDataProvider[0].Value;
							setSessionState(_currentSelectedObject, newSessionState, true);
							return;
						}
	
						
						var oldSessionState:Object = _currentSelectedObject ? getSessionState(_currentSelectedObject) : null;
						// special case of DynamicState objects
						if (oldSessionState is Array) 
						{
							newSessionState = (oldSessionState as Array).concat();
							for (i = 0; i < newSessionState.length; ++i)
							{
								var lookupName:String = (newSessionState[i] as DynamicState).objectName;
								
								// find the matching value in the datagrid, if there is one
								for (j = 0; j < _currentSessionStateDataProvider.length; ++j)
								{
									if (_currentSessionStateDataProvider[j].Name == lookupName)
									{
										(newSessionState[i] as DynamicState).sessionState = _currentSessionStateDataProvider[j].Value;
										break;
									}
								}
							}
							
							setSessionState(_currentSelectedObject, newSessionState, false);
							return;
						}

						// general case of just a Dictionary
						newSessionState = new Object();
						for (i = 0; i < _currentSessionStateDataProvider.length; ++i)
						{
							newSessionState[_currentSessionStateDataProvider[i].Name] = _currentSessionStateDataProvider[i].Value;
						}
						
						setSessionState(_currentSelectedObject, newSessionState, false); // do not remove any missing things
					}
				}
		    }
			
			private function arrayHasSimpleContents(array:Array):Boolean
			{
				for each (var o:Object in array)
				{
					switch (typeof(o))
					{
						case "object":
						case "function":
							return false;
							break;
						
						default:
							break;
					}
				}
				
				return true;
			}
			
			private static const defaultEditor:SessionStateEditor = new SessionStateEditor();
			
			public static function openDefaultEditor(rootObject:ILinkableObject = null):void
			{
				if (!defaultEditor.parent)
					PopUpManager.addPopUp(defaultEditor, Application.application as Application);
				
				if (rootObject == null)
					rootObject = Weave.root;
				
				defaultEditor.sessionNav.rootObject = rootObject;

				defaultEditor.restorePanel();
			}
			
		]]>
	</mx:Script>
</ui:DraggablePanel>


			
