<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author abaumann
@author sanbalagan
@author adufilie
-->
<mx:VBox xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns="weave.ui.*"
	implements="weave.api.core.ILinkableObject"
	width="100%" height="100%"
	enabled="{colorRamp != null}"
	>
	<mx:HBox height="100%" width="100%">
		<mx:VBox width="100%" height="100%">
			<ui:ColorRampList id="colorRampList" colorRamp="{colorRamp}"/>
			<ui:Indent label="Filter:">
				<ui:CustomComboBox id="filterCombo" change="(colorRampList.dataProvider as ICollectionView).refresh();"/>
			</ui:Indent>
		</mx:VBox>
		<mx:VBox width="200" height="100%">
			<mx:Label text="Customize" fontWeight="bold"/>
			<mx:HBox>
				<mx:Canvas id="colorRampCanvas" resize="drawColorRamp()"
						   borderStyle="solid" borderColor="0x000000"
						   width="20" height="100%"/>
				<mx:List id="colorsList"
						 height="{colorsList.dataProvider.length * 30}"
						 borderStyle="none"
						 dragEnabled="true"
						 dropEnabled="true"
						 dragMoveEnabled="true"
						 dragComplete="updateNewColorScale()"
						 >
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
								<mx:ColorPicker id="cPicker" showTextField="true"/>
								<ui:TextInputWithPrompt toolTip="Please note to add 0x before the hex value" prompt="0x######" id="cText" width="75"/>
								<mx:Image source="@Embed(source='/weave/resources/images/cancel.png')" buttonMode="true"
										   click="outerDocument.removeColorItem();"/>
								<mx:Script>
									<![CDATA[
										import mx.binding.utils.BindingUtils;
										import mx.collections.ArrayCollection;
										import mx.events.DragEvent;
										
										import weave.compiler.StandardLib;
										
										override protected function childrenCreated():void
										{
											super.childrenCreated();
											
											cPicker.addEventListener(Event.CHANGE, handleColorPicked);
											cText.addEventListener(Event.CHANGE, handleColorPicked);
											outerDocument.colorsList.addEventListener(DragEvent.DRAG_START, handleDragStart);
										}
										
										override public function set data(value:Object):void
										{
											super.data = value;
											
											if (data)
											{
												var number:Number = StandardLib.asNumber(data.color);
												var string:String = outerDocument.colorToString(number);
												
												cPicker.selectedColor = number;
												cText.text = string;
											}
										}
										
										private function handleColorPicked(event:Event):void
										{
											if (event.currentTarget == cPicker)
												data.color = outerDocument.colorToString(cPicker.selectedColor);
											else
												data.color = outerDocument.colorToString(cText.text);
											outerDocument.updateNewColorScale();
										}
										
										private function handleDragStart(e:Event):void
										{
											cPicker.close();
											cText.setSelection(0, 0);
											setFocus(); // stops selecting text
										}
									]]>
								</mx:Script>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
			</mx:HBox>
			<mx:HBox>
				<mx:Button label="Reverse"
						 toolTip="Click to reverse the colors in the color scale."
						 click="colorRamp.reverse();"/>
				<mx:Button label="Add color" click="(colorsList.dataProvider as ArrayCollection).addItem({color:'0xFFFFFF'}); updateNewColorScale();"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import mx.collections.ICollectionView;
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import weave.compiler.StandardLib;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			
			import weave.api.core.ILinkableObject;
			import weave.primitives.ColorRamp;
			
			private var _colorRamp:ColorRamp;
			[Bindable]
			public function get colorRamp():ColorRamp
			{
				return _colorRamp;
			}
			public function set colorRamp(value:ColorRamp):void
			{
				
				if(_colorRamp)
					_colorRamp.removeCallback(handleColorRampChange);
				_colorRamp = value;
				_colorRamp.addGroupedCallback(this, handleColorRampChange, true);
			}
			
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				var tagsLookup:Object = {};
				var tags:Array = [];
				for each (var xml:XML in ColorRamp.allColorRamps.colorRamp)
					for each (var tag:String in String(xml.@tags).split(','))
						if (!tagsLookup[tag])
							tags.push(tagsLookup[tag] = tag);
				tags.sort(Array.CASEINSENSITIVE);
				tags.unshift(ALL);
				filterCombo.dataProvider = tags;
				colorRampList.dataProvider.filterFunction = filterColormaps;
			}
			
			private const ALL:String = 'All';
			
			private function filterColormaps(item:Object):Boolean
			{
				var filter:String = filterCombo.selectedItem as String;
				return (filter == ALL || String(item.@tags).split(',').indexOf(filter) >= 0);
			}
			
			public function removeColorItem():void
			{
				(colorsList.dataProvider as ArrayCollection).removeItemAt(colorsList.selectedIndex);
				updateNewColorScale();
			}
			
			internal function colorToString(color:*):String
			{
				color = StandardLib.asNumber(color);
				return '0x' + StandardLib.numberToBase(color, 16, 6).toUpperCase();
			}
			
			private function handleColorRampChange():void
			{
				if (colorsList.dataProvider == null)
					colorsList.dataProvider = [];
				
				var dp:ArrayCollection = (colorsList.dataProvider as ArrayCollection);
				dp.removeAll();
				var colors:Array = colorRamp.getColors();
				for (var i:int = 0; i < colors.length; i++)
				{
					var item:Object = new Object();
					item.color = colorToString(colors[i]);
					dp.addItem(item);
				}
				
				drawColorRamp();
			}
			
			private function drawColorRamp():void
			{
				if (!_colorRamp)
					return;
				
				var g:Graphics = colorRampCanvas.graphics;
				g.clear();
				for (var i:int = 0; i < colorRampCanvas.height; i++)
				{
					var color:Number = _colorRamp.getColorFromNorm(i / colorRampCanvas.height);
					g.lineStyle(1, color, 1, true);
					g.moveTo(0, i);
					g.lineTo(colorRampCanvas.width - 1, i);
				}
			}
			
			public function updateNewColorScale():void
			{
				var rampStringValue:String = '';
				
				for (var i:int = 0; i < colorsList.dataProvider.length; i++)
				{
					var item:Object = (colorsList.dataProvider as ArrayCollection).getItemAt(i);
					
					rampStringValue += item.color + ',';
				}
				
				rampStringValue = rampStringValue.substr(0,rampStringValue.length-1);
				
				_colorRamp.value = rampStringValue;
			}
		]]>
	</mx:Script>
</mx:VBox>
