<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel
	xmlns="weave.ui.infomap.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	borderThickness="0"
	width="25%" height="25%"
	backgroundAlpha="0"
	layout="absolute"
	title="InfoMap Prototype"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.data.KeySets.KeySet;
			import weave.ui.CustomContextMenuManager;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			override protected function constructor():void
			{
				super.constructor();
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				
			}
			
			
			
			/*************************************************
			 *                static section                 *
			 *************************************************/
			
			
			
			/**
			 * This function is called whenever the context menu is opened.
			 * The function will change the caption displayed depending upon where the context menu was opened.
			 */
			
			private static const INFOMAP_CAPTION:String = "Open InfoMap";
			private static var _infoMapMenuItem:ContextMenuItem = null;
			private static var _selectedKeySet:KeySet = null;
			
			/**
			 * this function is called when the menu is opened. Use this function to change the menu 
			 * text based on the context it is opened it
			 **/
			private static function handleContextMenuOpened(e:ContextMenuEvent):void
			{	
				
				_infoMapMenuItem.enabled = _selectedKeySet.keys.length > 0;
			}
			
			/**
			 * Creates a menu item
			 **/
			public static function createContextMenuItems(destination:DisplayObject):Boolean
			{
				if(!destination.hasOwnProperty("contextMenu") )
					return false;
				
				_selectedKeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
				
				// Add a listener to this destination context menu for when it is opened
				var contextMenu:ContextMenu = destination["contextMenu"] as ContextMenu;
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleContextMenuOpened);
				
				_infoMapMenuItem = CustomContextMenuManager.createAndAddMenuItemToDestination(INFOMAP_CAPTION,destination,handleMenutItemClick,"3 searchMenuItems");
				
				return true;
			}
			
			private static var _keywords:Dictionary = new Dictionary();
			private static function handleMenutItemClick(event:ContextMenuEvent):void
			{
				var keys:Array = _selectedKeySet.keys;
				
				var probeString:String = "";
				var temp:Array = [];
				
				probeString = ProbeTextUtils.getProbeText(_selectedKeySet);
				
				//TODO: May want to consider removing numbers
				var regEx:RegExp = /[a-zA-Z]+/g;
				
				temp =  probeString.match(regEx);
				
				var keywords:Dictionary = new Dictionary();
				
				for each(var word:String in temp)
				{
					if(keywords[word] == undefined)
						keywords[word] = true;
				}
			}
			
		]]>
	</mx:Script>
</ui:DraggablePanel>
