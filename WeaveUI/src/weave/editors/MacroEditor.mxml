<?xml version="1.0" encoding="utf-8"?>
<ui:DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*" layout="absolute"
				   width="400" height="300" title="Macro Editor" backgroundColor="#EFF4BC">
	<mx:VBox height="100%" width="100%" paddingBottom="5" paddingTop="5" paddingRight="5" paddingLeft="5">
		<mx:HBox>
			<mx:Button label="Apply" height="100%" width="33%" click="applyEntry(event)"/>
			<mx:Button label="Delete" height="100%" width="33%" click="deleteEntry(event)"/>
			<mx:Button label="Add" height="100%" width="33%" click="newMacroEntry(event)"/>
		</mx:HBox>
	<mx:HDividedBox height="100%" width="100%">
		<ui:LinkableObjectList id="macroList" height="100%" width="100%"
						  	 hashMap="{LinkableFunction.macros}" itemClick="macroList_itemClickHandler(event)"/>
		<mx:VBox height="100%" width="100%">
			<mx:TextArea id="funcValues" height="100%" width="100%" change="funcValues_changeHandler(event)"/>
			<mx:Text text="Macro Result:" />
			<mx:TextArea id="macroResult" editable="false" width="100%" height="20%" />
		</mx:VBox>
	</mx:HDividedBox>
	</mx:VBox>
		<mx:Script>
			<![CDATA[
				import mx.events.ListEvent;
				import mx.managers.PopUpManager;
				
				import weave.api.WeaveAPI;
				import weave.core.LinkableFunction;
				import weave.ui.AlertTextBox;
				import weave.ui.AlertTextBoxEvent;
				import weave.visualization.tools.ScatterPlotTool;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					if( !(LinkableFunction.macros.getNames().length > 0) )
						funcValues.editable = false;
					else
						funcValues.editable = true;
				}
				
				protected function applyEntry(event:MouseEvent):void
				{
					if(macroList.selectedIndex > -1)
					{
						var funcToSave:LinkableFunction = (macroList.hashMap.getObject(macroList.hashMap.getName(macroList.selectedItem as LinkableFunction)) as LinkableFunction);	
						funcToSave.value = funcValues.text;
					}
					
				}

				protected function deleteEntry(event:MouseEvent):void
				{
					if( macroList.selectedIndex > -1)
					{
						LinkableFunction.macros.removeObject(macroList.hashMap.getName(macroList.selectedItem as LinkableFunction));
					}
				}
				
				protected function newMacroEntry(event:MouseEvent):void
				{
					var box:AlertTextBox = AlertTextBox.show("Macro Naming Window", "Enter a name for the new macro:");
					box.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED,checkInput);
				}
				
				private function checkInput(event:AlertTextBoxEvent):void
				{
					if( event.confirm == true )
					{
						var macroNames:Array = LinkableFunction.macros.getNames();
						for( var i:int = 0; i < macroNames.length; i++)
						{
							if( event.textInput == macroNames[i])
							{
								var box:AlertTextBox = AlertTextBox.show("Macro Naming Window", "The name you entered is already being used. Please enter a new name:");
								box.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED,checkInput);
							}
						}
						var funcToSave:LinkableFunction = LinkableFunction.macros.requestObject(event.textInput, LinkableFunction, false);
						funcValues.editable = true;
					}
				}
				
				protected function macroList_itemClickHandler(event:ListEvent):void
				{
					funcValues.text = (macroList.hashMap.getObject(macroList.hashMap.getName(macroList.selectedItem as LinkableFunction)) as LinkableFunction).value;
				}
				
				protected function funcValues_changeHandler(event:Event):void
				{
					try{
						var funcToSave:LinkableFunction = LinkableFunction.macros.requestObject("_internalTestFunc", LinkableFunction, false);
						funcToSave.value = funcValues.text;
						macroResult.text = LinkableFunction.evaluateMacro("_internalTestFunc");
					}
					catch(e:Error)
					{
						macroResult.text = "Error.";
					}
				}
				
			]]>
		</mx:Script>
</ui:DraggablePanel>