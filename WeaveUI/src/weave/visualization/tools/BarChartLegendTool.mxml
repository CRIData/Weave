<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IPlotLayer;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableNumber;
			import weave.core.SessionManager;
			import weave.core.weave_internal;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.BarChartLegendPlotter;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			
			use namespace weave_internal;
			
			private var _barLegendPlotter:BarChartLegendPlotter;
			private var _barLegendLayerName:String;
			private const _colorLegendLayerName:String = "color legend";
			private var _colorLegendLayer:SelectablePlotLayer;
			private var _colorLegendPlotter:ColorBinLegendPlotter;
			public var marginTop:LinkableNumber = newLinkableChild( this, LinkableNumber, changeHeight, true );
			
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				
				// create bar segment legend
				_barLegendPlotter = initDefaultPlotter(BarChartLegendPlotter);
				_barLegendLayerName = visualization.layers.getName(plotLayer);
				
				// create global color ramp legend
				_colorLegendLayer = visualization.layers.requestObject(_colorLegendLayerName, SelectablePlotLayer, true);
				_colorLegendPlotter = _colorLegendLayer.getDynamicPlotter().requestLocalObject(ColorBinLegendPlotter, true);
				_colorLegendLayer.useTextBitmapFilters.value = true;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				_colorLegendPlotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);
				toolTitle.addGroupedCallback(this, updateTitle, true);

				panelWidth.value = "20%";
				panelHeight.value = "50%";
				panelX.value = "40%";
				panelY.value = "25%";

				visualization.marginBottom.value = 5;
				visualization.marginTop.value    = 35;
				visualization.marginLeft.value   = 5;
				visualization.marginRight.value  = 5;
				
				Weave.properties.axisFontFamily.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontColor.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontSize.addGroupedCallback(this,updateMarginLabel);
				Weave.properties.axisFontUnderline.addGroupedCallback(this, updateMarginLabel);
			}
			
			public const dynamicBarChartTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(CompoundBarChartTool), handleBarChartChange, true);
			
			private function get barChart():CompoundBarChartTool
			{
				return dynamicBarChartTool.internalObject as CompoundBarChartTool;
			}
			
			private function handleBarChartChange():void
			{
				// update the legend properties to reflect the new bar chart properties.
				
				if (barChart != null)
				{
					copySessionState(barChart._plotter.chartColors, _barLegendPlotter.chartColors);
					copySessionState(barChart._plotter.heightColumns, _barLegendPlotter.columns);
				}
				
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
				{
					// show global color ramp legend
					_colorLegendLayer.layerIsVisible.value = true;
					plotLayer.layerIsVisible.value = false;
				}
				else
				{
					// show bar segment legend
					_colorLegendLayer.layerIsVisible.value = false;
					plotLayer.layerIsVisible.value = true;
				}
				
				updateMarginLabel();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
					AttributeSelectorPanel.openDefaultSelector(_colorLegendPlotter.dynamicColorColumn);
				else
					AttributeSelectorPanel.openDefaultSelector(barChart._plotter.heightColumns);
			}
			
			[Bindable]
			private var marginLabelText:String = "";
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_barLegendPlotter.columns.getObjects().length <= 1 || barChart == null)
				{
					marginLabelText = ColumnUtils.getTitle(_colorLegendPlotter.dynamicColorColumn);
					visualization.additionalProbeColumns = (WeaveAPI.SessionManager as SessionManager).getDescendants(_colorLegendPlotter.dynamicColorColumn, ReferencedColumn);
				}
				else
				{
					marginLabelText = "Bar Segment Colors";
					visualization.additionalProbeColumns = null;
				}
				marginLabel.setStyle("fontFamily", Weave.properties.axisFontFamily.value);
				marginLabel.setStyle("color", Weave.properties.axisFontColor.value);
				marginLabel.setStyle("fontSize", Weave.properties.axisFontSize.value);
				if(Weave.properties.axisFontUnderline.value) marginLabel.setStyle("textDecoration", "underline");
				else marginLabel.setStyle("textDecoration", "none");
				linkBindableProperty( marginTop, marginLabel, "height" );
			}
			
			private function changeHeight():void
			{
				visualization.marginTop.value = marginLabel.height + 8; 
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
				{
					title = "Bar Chart Legend";
				}
			}
			
			protected function titleControl_changeHandler(event:Event):void
			{
				if( titleControl.selected == true )
					marginLabel.height = 0;
				else
					marginLabel.height = 35;
			}
			
		]]>
	</mx:Script>
	
	<mx:TextArea x="5" y="5" id="marginLabel" fontWeight="bold" click="handleMarginLabelClick()" 
			  	text="{marginLabelText}" width="100%"  horizontalScrollPolicy="off" verticalScrollPolicy="off"
				wordWrap="true" selectable="false" editable="false"
				paddingLeft="0" paddingRight="0" borderThickness="0"
			  	toolTip="{marginLabelText} &#13;&#09;Click here to select the attribute(s) used for the bars."
			 	rollOver="CustomCursorManager.showCursor(CustomCursorManager.LINK_CURSOR);" rollOut="CustomCursorManager.removeAllCursors();"/>
	
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Color Bin Legend">
			<mx:CheckBox id="titleControl" label="Hide Title" change="titleControl_changeHandler(event)" toolTip="Click to hide the title of the Legend."/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
