<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/

-->
<!---

@author spurushe
-->
<mx:TabNavigator xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"		 
			   implements="weave.api.ui.ILinkableObjectEditor"
			   >
	
	<mx:Script>
		<![CDATA[
			import flash.utils.getQualifiedClassName;
			
			import mx.events.ListEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableHashMap;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.KeySet;
			import weave.data.QKeyManager;
			import weave.radviz.ClassDiscriminationLayoutAlgorithm;
			import weave.radviz.ClassInfoObject;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			
			
			
			[Bindable] public var _target:RadVizTool = null;
				
			
			[Bindable] 
			public var columnNames:Array  = new Array();
			public var selectedColumnName:String;
			public var cdLayout:ClassDiscriminationLayoutAlgorithm = new ClassDiscriminationLayoutAlgorithm(); 
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			//public var ClassToColumnMap:Dictionary = new Dictionary();// contains unique classes 
			
			 override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				(size as DynamicColumnComponent).dynamicObject = _target._plotter.radiusColumn ;
				(colorComponent as DynamicColumnComponent).dynamicObject = _target.colorColumn;
				columnList.hashMap = _target._plotter.columns;
				(classDis as DynamicColumnComponent).dynamicObject = _target.classDiscriminatorColumn;
				
				linkBindableProperty(_target._plotter.enableJitter,jitterckbx,'selected');
				linkBindableProperty(_target._plotter.radiusConstant,sizeSlider,'value');				
				linkBindableProperty(_target._plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_target._plotter.jitterLevel, jitterSlider, "value" );	
				
				//updating options for classes
				_target._plotter.columns.addImmediateCallback(this, updateClassColumnOptions);
				
				
			} 
			
			public function setTarget(object:ILinkableObject):void
			{
				_target = object as RadVizTool;
			}
			public function applyChanges():void
			{
				
			}
	
			
			private function alphaSliderFormatFunction(item:Number):String 
			{
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			/* private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			} */
			
			/**this function updates the options for chosing the column to decide classes for the CDlayout*/
			private function updateClassColumnOptions():void{ 
			     var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
				var attributeColumns:Array = new Array(); 
				
				for(var i:int = 0; i < colObjects.length; i++)
				{
					attributeColumns[i] = colObjects[i] as IAttributeColumn;
					columnNames[i] = ColumnUtils.getTitle(attributeColumns[i]);
				} 
				 classColumnCB.dataProvider = columnNames;
				 classColumnCB.selectedIndex = 0; 
				
			}
			
			
			/**this function sends the data in the form of a matrix for normalization in R*/
			/*  private function normalizationInR(unNormcolumns:Array):void
			{
				var inputValues:Array = new Array(); var inputNames:Array;
				inputNames = ["mymatrix"];
			    var outputNames:Array = ["normOutput"];
				var script:String = "frame <- data.frame(mymatrix)\n" +
					"donorm <- function(frame){\n" +
					"RR <- nrow(frame)\n"+
					"CC <- ncol(frame)\n"+
					"for (z in 1:CC){\n"+
					"maxr <- max(frame[z])\n"+
					"minr <- min(frame[z])\n"+
					"for(i in 1:RR){\n"+
					" frame[i,z] <- (frame[i,z] - minr) / (maxr - minr)\n"+
					" }\n"+
					"}\n"+
					"frame\n"+
					"}\n"+
					"normOutput <- donorm(frame)\n";
		
			var result:Array = joinColumns(unNormcolumns);
			var joinedColumnsKeys:Array = result[0];
			var joinedColumns:Array = result[1];
				 
			
				inputValues.push(joinedColumns); 
				var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,script,"",false,false,false);
				DelayedAsyncResponder.addResponder(query, handleNormScriptResult, handleRunScriptFault,joinedColumnsKeys);
			}  */
			
			
			protected function classColumnCB_changeHandler(event:ListEvent):void
			{
					selectedColumnName = classColumnCB.selectedLabel;
					var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
					//normalizationInR(colObjects);//sending unnormalized columns
					
			}
			
			/** This function determines the classes and  populates the Dictionary called ClassToColumnMap which is used for the Class Discrimination Layout Algorithm
			can be used when the discriminator class is of a categorical nature  */
			/* private function fillingClassToColumnMap():void
			{
				//if(UIUtils.hasFocus(classColumnCB)){
					
				//}
				
				var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
					
				 for(var j:int = 0; j < colObjects.length; j++)//Step 1 Finding the column which has been selected
				{ 
					var selectedOptionName:String= classColumnCB.selectedLabel;
					var attr:IAttributeColumn = colObjects[j] as IAttributeColumn;
					var attrName:String = ColumnUtils.getTitle(attr);
					if(selectedOptionName == attrName )
					{ 
						//Step 2 Looping thru the keys in the found column and populating the type dictionary
						for(var g:int = 0; g < attr.keys.length; g++)
						{
							var mkey:IQualifiedKey = attr.keys[g] as IQualifiedKey;
							var type:Object = attr.getValueFromKey(mkey,String);//"japanese", "american" etc
							
							
							
							if(!ClassToColumnMap.hasOwnProperty(type) && !tAndpMapping.hasOwnProperty(type))
							{
								ClassToColumnMap[type] = new ClassInfoObject();
								tAndpMapping[type] = new Array();
								
							}
							
							var infoObject:ClassInfoObject = ClassToColumnMap[type];
							for (var f:int = 0; f < colObjects.length; f ++)//filling in the type columnMapping with arrays
							{
								if(!infoObject.columnMapping.hasOwnProperty(columnNames[f]))							 
									
									infoObject.columnMapping[columnNames[f]] = new Array();
							}
							
							for(var b:int = 0; b < normalizedColumns.length; b++)
							{
								var tempEntry:Number = (normalizedColumns[b] as IAttributeColumn).getValueFromKey(mkey,Number);
								var zz:Array = infoObject.columnMapping[columnNames[b]] as Array ;
								zz.push(tempEntry);
							}
							
						}//ClassToColumnMap gets filled 
						
					}
					
				}
				
			} */
			
			
			
			/** Returns the normalized dataset */
		/* 	private function handleNormScriptResult(event:ResultEvent, token:Object = null):void
			{
				var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
				var temRObjects:Array = new Array();
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;				
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					temRObjects = (rResult.value) as Array;
				
				}	
				
				for (var j:int = 0 ; j < temRObjects.length; j++)
				{
					normalizedColumns.push(ResultUtils.resultAsNumberColumn(token,temRObjects[j],columnNames[j]+"norm"));
				}
				
				cdLayout.fillingClassToColumnMap(selectedColumnName,colObjects,columnNames,normalizedColumns);
				_target._plotter.doCDLayout = true;
				_target._plotter.LayoutClasses = cdLayout.tAndpMapping;
				
				
			//	fillingClassToColumnMap();
			}
			 */
			private var runScriptCounter:int = 0;
			private var tickMax:int = 0;
			
			/**this function handles the results returned from R (the t-statistic and the p-values)*/
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{
					runScriptCounter = runScriptCounter + 1;
				
					//Object to stored returned result - Which is array of object{name: , value: }
					var Robj:Array = event.result as Array;				
					
					if (Robj == null)
					{
						reportError("R Servlet did not return an Array of results as expected.");
						return;
					}
					
					//Collecting all RResult Objects into an Array 
					var RresultArray:Array = new Array();
					
					//collecting Objects of type RResult(Should Match result object from Java side)
					for (var i:int = 0; i < (event.result).length; i++)
					{
						if (Robj[i] == null)
						{
							trace("WARNING! R Service returned null in results array at index "+i);
							continue;
						}
						var rResult:RResult = new RResult(Robj[i]);
						RresultArray.push(rResult);	
						
						
					}	
					
					//var colIndex:int = token[1];
					var colIndex:int = columnNames.indexOf(token[1]);
				
					//Fills in the t-statistic and pValues(hard coded since we will be receiving only two values from R)
					(token[0] as ClassInfoObject).tStatisticArray[colIndex] = ((RresultArray[0] as RResult).value);
					(token[0] as ClassInfoObject).pValuesArray[colIndex] =((RresultArray[1] as RResult).value);
					trace("handlescript successful!");
				
					/* we use these two counters due to issues in asynchronous invocation, actualAlgo should run only
					after all the results from the R-service call have been returned. */
					 /* if(scriptCallCounter == runScriptCounter)
					{ 	
						scriptCallCounter = 0;
						runScriptCounter = 0;	
						//actualAlgo(ClassToColumnMap);
						
						
					} 
					 */
			}
			
			/* private function actualAlgo(ClassToColumnMap:Dictionary):Dictionary
			{
				trace(thresholdValue.text);
				for (var r:int = 0 ; r < columnNames.length; r++)//for each column loop through the classes
				{
					var tempType:Object = new Object();
					var isColumnLoopBegin:Boolean = true;
					var compareNum:Number;
					for (var type:Object in ClassToColumnMap)
					{
						var tempTValue:Number = (ClassToColumnMap[type] as ClassInfoObject).tStatisticArray[r];
						 if (tempTValue > (thresholdValue.text as Number))
						 {
								if(isColumnLoopBegin)
								{
									isColumnLoopBegin = false;
									compareNum = (ClassToColumnMap[type]as ClassInfoObject).tStatisticArray[r];
									tempType = type;
								}
								else
								{
									if(compareNum < tempTValue)
									{
										compareNum = tempTValue;
										tempType = type;
									}
									
								}
						 }
					}
					
					//(tAndpMapping[tempType] as Array).push((ClassToColumnMap[tempType]as ClassInfoObject).columnMapping[columnNames[r]]);
					(tAndpMapping[tempType] as Array).push(columnNames[r]);
				}
				
				return tAndpMapping;
			}
			 */
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
					trace(["fault", token, event.message].join('\n'));
					reportError(event);
			}
			
			private var scriptCallCounter:int = 0;
			/**this function sends columns to R for calculation of the t-statistic and p-value*/
			protected function layoutAlgoCB_changeHandler(event:ListEvent):void
			{
				/*  var script:String = "";
				var flag:Boolean;  */
					if(UIUtils.hasFocus(layoutAlgoCB)){
						var selectedOptionName:String= layoutAlgoCB.selectedLabel;
						trace(selectedOptionName);
						trace (script);
					}
					
					/*  if (selectedOptionName == "t-statistic = variance"){flag = true;}
					
					if (selectedOptionName == "t-statistic != variance"){flag = false;}  */
					
					/* Call to R
					FOr a type(example "American") sends one column at a time and a two-sample t-test is performed in R
					For each column the t-statistic and p-value are returned from R
					*/
					
					var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
					
					/*  if(flag){script = "cdoutput <- t.test(x,y, var.equal = TRUE)"; trace(script);}
					if(!flag){script = "cdoutput <- t.test(x,y, var.equal = FALSE)"; trace(script);}  */
					
					for (var type:Object in cdLayout.ClassToColumnMap)
					{						
						for(var l:int = 0; l < colObjects.length; l++)
						{
							var inputValues:Array = new Array();//sending two vectors to R
							var inputNames:Array;
							inputValues.push((cdLayout.ClassToColumnMap[type] as ClassInfoObject).columnMapping[columnNames[l]]);//pushing col belonging to type
							var temArray:Array = new Array();
							var temArray2:Array = new Array();
							for(var comparetype:Object in cdLayout.ClassToColumnMap)
							{
								if(type!= comparetype)//collecting the values of the same column for other types
								{
									temArray = temArray.concat((cdLayout.ClassToColumnMap[comparetype]as ClassInfoObject).columnMapping[columnNames[l]]);
								}
							}
							
							inputValues.push(temArray);
							inputNames = ["x", "y"];
							
							var idString:String = columnNames[l]+"_"+type+"_";
							var script:String = idString+"cdoutput <- t.test(x,y)";
							var outputNames:Array = [idString+"cdoutput$statistic",idString+"cdoutput$p.value"];//(tstatistic, pvalue) values to be obtained from R
							
							//send one column to R at a time
							var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,script,"",false,false,false);
							DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault,[cdLayout.ClassToColumnMap[type],columnNames[l]]);
							//DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault,[cdLayout.ClassToColumnMap[type],l]);
							scriptCallCounter = scriptCallCounter + 1;
						}
						
					}
					
				}
			
			protected function Button_clickHandler(event:MouseEvent):void
			{
				var thrValue:Number = Number(thresholdValue.text);
				cdLayout.actualAlgo(_target._plotter.columns.getNames(),cdLayout.ClassToColumnMap,thrValue);
				_target._plotter.columns.triggerCallbacks();
			}
			
		]]>
	</mx:Script>
	
	
		<mx:VBox id="attributesPanel" label="Attributes">
			<ui:DynamicColumnComponent  visTool="{_target}" id="colorComponent" label="Color" />
			<ui:DynamicColumnComponent visTool="{_target}" id="size" label="Size" />
			<ui:ColumnListComponent visTool="{_target}" id="columnList" label="Anchor Dimensions"/>
		</mx:VBox>		
		
		<mx:VBox id="VizControlsPanel" label="Appearance">
			<ui:Indent label="Point opacity"
					   width="100%"
					   toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).">
				<mx:HSlider id="alphaSlider"
							width="100%"
							alpha="1.0"
							snapInterval="0.1"
							tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="Point radius"
					   width="100%"
					   toolTip="Use this control to adjust point radius">
				<mx:HSlider id="sizeSlider"
							width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="Label angle" width="100%">
				<mx:HSlider id="labelAngleSlider" width="100%"
					snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
					dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
					creationComplete="linkBindableProperty(_target._anchorPlotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
		</mx:VBox>
		
		<mx:VBox id="advancedPanel" label="Advanced">			
			<mx:VBox>
				<mx:HBox
					creationComplete="linkBindableProperty(_target._plotter.localNormalization,normalizationType,'selectedValue')">
					<mx:Label text="Normalization method:"
							  toolTip="Select the type of normalization used to calculate record coordinates"/>
					<mx:RadioButtonGroup id="normalizationType"/>
					<mx:RadioButton groupName="normalizationType"
									id="localNorm"
									value="true"
									label="Local"
									/>
					<mx:RadioButton groupName="normalizationType"
									id="globalNorm"
									value="false"
									label="Global"
									/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="jitterckbx" label="Apply Jitter:" 
							  toolTip="Use this control to change record coordinates by a random number"/>
					<mx:Button label="Randomize Jitter"
							   toolTip="Use this control to reseed jitter with new random values"
							   click="_target._plotter.setNewRandomJitterColumn();"/>
					<mx:Label text="Jitter Level:" 
							  enabled="{jitterckbx.selected}"
							  toolTip="Use slider to adjust the jitter level"/>					
					<mx:HSlider id="jitterSlider"
								enabled="{jitterckbx.selected}"
								width="100%"
								alpha="1.0"
								snapInterval="1"
								tickInterval="1"
								labels="{['1','2','3','4','5','6','7','8','9','10']}"
								showDataTip="false"
								minimum="-19" maximum="-10"
								liveDragging="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:Label text="Dimensional Anchor Reordering Algorithm:"
						  toolTip="Use this control to reorder the dimensional anchors"/>					
				<mx:ComboBox id="algorithmComboBox" dataProvider="{_target._plotter.algorithms}"
							 creationComplete="linkBindableProperty(_target._plotter.currentAlgorithm,event.target,'selectedItem')"/>
				<mx:HBox enabled="{algorithmComboBox.selectedIndex == 0}">
					<mx:Label text="Number of Iterations"/>
					<mx:TextInput id="iterationsTextInput" enabled="{algorithmComboBox.selectedIndex == 0}"
								  creationComplete="linkBindableProperty(_target._plotter.iterations, event.target, 'text')"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	<mx:VBox id="cdlayout" label="CDLayout" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox>
			
		
		<mx:VBox width="45%">
					<ui:Indent label="Class Column">
					<mx:ComboBox id="classColumnCB" change="classColumnCB_changeHandler(event)" />
					</ui:Indent>
			<ui:DynamicColumnComponent  visTool="{_target}" id="classDis" label="Class" />	
			
				<ui:Indent label="Layout Algorithm">
					
					<mx:ComboBox id="layoutAlgoCB" change="layoutAlgoCB_changeHandler(event)">
						<mx:ArrayCollection>
							<mx:String>Select an option</mx:String>
							<mx:String>t-statistic = variance</mx:String>
							<mx:String>t-statistic != variance</mx:String>
							<mx:String>Class Distinction</mx:String>
						</mx:ArrayCollection>
					</mx:ComboBox>
					</ui:Indent>
			
			<mx:Spacer height="10"/>
		
				<mx:CheckBox label="Use Threshold" id="useThresholdCB" />
			<ui:Indent>
				<mx:VBox>
					<mx:CheckBox label="t-statistic"/>
					<mx:CheckBox label="p-value"/>
					
				</mx:VBox>
				
			</ui:Indent>
			<mx:HBox>
				<mx:Label text="Threshold Value"/>
				<mx:TextInput id="thresholdValue"/>
				<mx:Button id="Button" label="OK" click="Button_clickHandler(event)"/>
			</mx:HBox>
			
			<mx:CheckBox label="Use Bonferroni Correction" id="useBonferroniCB" />
			<ui:Indent>
				<mx:VBox>
					<mx:CheckBox label="Use the number of active columns"/>
					<mx:CheckBox label="Custom Value"/>
					<mx:TextInput id="customValue"/>
				</mx:VBox>
				
			</ui:Indent>
		</mx:VBox>
	
		<mx:VBox >
			<ui:Indent label="Class Column">
				<mx:ComboBox>
					<mx:ArrayCollection>
						<mx:String>Positive Influences only</mx:String>
						<mx:String>Negative Influences only</mx:String>
						<mx:String>Both influences</mx:String>
					</mx:ArrayCollection>
				</mx:ComboBox>
			</ui:Indent>
			
			<mx:CheckBox label="Limit Number of Columns Assigned"/>
			<mx:HBox>
				<mx:Label text= "Columns per class"/>
				<mx:TextInput id="columninClassTI"/>
			</mx:HBox>
			
			<mx:Spacer height="20"/>
			
			<mx:CheckBox id="tInTableCB" label="Show t-statistic in table"/>
			<mx:CheckBox  id="pInTableCB" label="Show p values in table"/>
			
			<mx:Spacer height="20"/>
			<mx:Label text="Display with Axis Names"/>
			<ui:Indent>
				<mx:CheckBox id="tInRadvizCB" label="t-statistic"/>
				<mx:CheckBox id="pInRadvizCB" label="p-value"/>	
				
			</ui:Indent>
			
			
		</mx:VBox>
		</mx:HBox>
	</mx:VBox>
		
	
</mx:TabNavigator>
