<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				xmlns:ui="weave.ui.*"  
				backgroundColor="0x87CEFF"
				x="15%" width="70%" y="15%" height="70%"
				title="{lang('R Interface Tool')}"
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool" xmlns:tools="weave.visualization.tools.*" xmlns:controlBars="weave.ui.controlBars.*">
	<mx:VBox paddingLeft="10" paddingRight="5" paddingTop="5" paddingBottom="20" width="100%" height="100%">
		<mx:MenuBar id="ROptions" labelField="@label" fontWeight="bold" cornerRadius="8" itemClick="menuItemClickHandler(event)"
					change="onTopSelection(event)">
			<mx:dataProvider>
				<mx:XMLList xmlns="">
					
			<menuitem  id = "Hello" label="File">
				<menuitem label = "New Script"/>
				<menuitem label="Import Script" />
				<menuitem label="Export Script"/>
			</menuitem>
			<menuitem label = "Warnings">
				<menuitem label="On"/>
				<menuitem label="Off"/>
			</menuitem>
			<menuitem label="Intermediate Results">
				<menuitem label="Include"/>
				<menuitem label="Omit"/>
			</menuitem>
			<menuitem label="Run Script">
				<menuitem label="Clustering">
					<menuitem label= "KMeans" />
					<menuitem label= "Fuzzy KMeans Clustering"/>
					<menuitem label= "Hierarchical Clustering"/>
					<menuitem label = "Data mining Platter"/>
				</menuitem>
				<menuitem label="Classification">
					<menuitem label= "Classification 1" />
					<menuitem label= "Classification 2"/>
				</menuitem>
			</menuitem>
				</mx:XMLList>
			</mx:dataProvider>
		</mx:MenuBar>
	
	<mx:HBox paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
		
			
		
		<!-- Data manipulation and value exhibit-->
		<mx:VBox id="dataBox" width="50%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			<mx:Label text="(1) Select data to send to R" fontWeight="bold"/>
			<ColumnListComponent id="data" width="100%" height="50%" hashMap="{dataColumns}" />
			<mx:Button id="assignmentButton" label="(2) Generate and assign Variables" click="updateVariableAssignment(event)"/>
			
			<mx:Label text="Orginal Columns" fontWeight="bold"/>
			<mx:AdvancedDataGrid id="columnValueexhibit" width="100%" defaultLeafIcon="{null}" initialize="gc.refresh();">
				<mx:dataProvider>
					<mx:GroupingCollection2 id="gc" source="{valueExhibitCollection}">
						<mx:grouping>
								<mx:Grouping label="Columns">
									<mx:GroupingField name = "Columns"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>
				</mx:dataProvider>        
				
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="GroupLabel" headerText="Columns"/>
					<mx:AdvancedDataGridColumn dataField="columnName" headerText="Attribute Name"/>
					<mx:AdvancedDataGridColumn dataField="assignedVariable" headerText="Variable Name"/>
					<mx:AdvancedDataGridColumn dataField="value" headerText="Value" showDataTips="true"/>
				</mx:columns>
			</mx:AdvancedDataGrid>
			
			<mx:Spacer height="10"/>
			
			<mx:Label text="R Script Results" fontWeight="bold"/>
			<mx:AdvancedDataGrid id="resultDatagrid" width="100%" defaultLeafIcon="{null}" initialize="resultgc.refresh();" >
				<mx:dataProvider>
					<mx:GroupingCollection2 id="resultgc" source="{scriptResultValueExhibitCollection}">
						<mx:grouping>
							<mx:Grouping label="Columns">
								<mx:GroupingField name = "Columns"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>
				</mx:dataProvider>        
				
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="GroupLabel" headerText="Columns"/>
					<mx:AdvancedDataGridColumn dataField="columnName" headerText="Attribute Name"/>
					<mx:AdvancedDataGridColumn dataField="assignedVariable" headerText="Variable Name"/>
					<mx:AdvancedDataGridColumn dataField="value" headerText="Value" showDataTips="true"/>
				</mx:columns>
			</mx:AdvancedDataGrid>
						 
						 			
		</mx:VBox>
		
		<!--Script and Script Result-->
		<mx:VBox id="scriptBox" width="50%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" height="100%">
			<!-- 1-->
			<mx:HBox>
				<mx:Label text="(3) Enter a title to your script" fontWeight="bold"/>
				<mx:TextInput id="scriptTitle"/>
				
			</mx:HBox>
			<mx:Label text="(4) Enter your Rscript" fontWeight="bold"/>
			<!--2-->
			<mx:TabNavigator width="100%" height="50%">
				<mx:VBox id="RscriptTab" label="R Script">
					<mx:TextArea id="RScriptTA" width="100%" height="100%"/>
					<!--ui:TextInputWithPrompt width="100%" height="100%" id="searchAttrTerms"
											prompt="{lang('foo = attr0 + attr1')}"
											/-->
				</mx:VBox>
				<mx:VBox id="plotScriptTab" label="R plotscript">
					<mx:TextArea id="RPlotscriptTA" width="100%" height="100%"/>
				</mx:VBox>
			</mx:TabNavigator>
			<mx:HBox>
			<mx:Spacer width="75%"	/>
			<!--mx:Button id="newScript" layoutDirection="rtl" label="New Script" click="newScript_clickHandler(event)"/-->
			</mx:HBox>
			<!--3-->
			<mx:Label text="(4) Enter script result variable name" fontWeight="bold"/>
			<!--4-->
			<mx:HBox width="100%">
				<mx:TextArea id="outputTA" width="75%" height="30%"/>
				
			<mx:HBox>
				<mx:CheckBox id="intermediateResultCB" label="{lang('Verbose')}" toolTip="{lang('Show intermediate results from R')}"/>
				<mx:CheckBox id="warningCB" label="{lang('Warnings')}" toolTip="{lang('Show warnings from R')}"/>
			</mx:HBox>
			</mx:HBox>
			<!--5-->
			<mx:Button id="B2" label="{lang('Run script')}" click="runningScript()"/>
			<mx:Spacer height="5"/>
			<!--6-->
			<mx:Label text="Results returned from R" fontWeight="bold"/>
			<!--7-->
			<mx:TextArea id="RResultConsole" width="100%" height="40%"/>
			<!--8-->
			<LabelWithWordWrap text="{lang('(6) Export your script for later use')}" fontWeight="bold"/>
			<!--9-->
			<mx:HBox>
				<mx:Button id="exportBtn" label="{lang('Export')}" />
				<mx:Button id="importBtn" label="{lang('Import')}" />	
			</mx:HBox>	
		</mx:VBox>			
		
	</mx:HBox>
	</mx:VBox>	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import weave.services.addAsyncResponder;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.MenuEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.Image;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.CSVColumn;
			import weave.data.AttributeColumns.StringColumn;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.ui.DataMiningEditors.DataMiningPlatter;
			import weave.ui.DataMiningEditors.FuzzyKMeansClusteringEditor;
			import weave.ui.DataMiningEditors.KMeansClusteringEditor;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;

			WeaveAPI.registerImplementation(IVisTool, RInterfaceTool, lang("RInterface"));
			
			[Bindable]
		    public var valueExhibitCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var scriptResultValueExhibitCollection:ArrayCollection = new ArrayCollection();
			public const dataColumns:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const RScriptTAtext:LinkableString = newLinkableChild(this, LinkableString);
			public const RPlotscriptTALinkabletext:LinkableString = newLinkableChild(this, LinkableString);
			public var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var resultString:String = "";//this is the result of every script returned from R
			public var numberOfRCalls:int = 0;
			
			public var columnNames:Array = new Array();
			public var inputNames:Array = new Array();
			public var variablesString:String = "" ;
			
			private var colorFlag:Boolean = false;
			private const ALTERNATING_COLOR1:uint = 0xADFF2F;
			private const ALTERNATING_COLOR2:uint = 0xA2CD5A;
			
			override protected function constructor():void
			{
				super.constructor();				
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(RScriptTAtext,RScriptTA,"text");
				linkBindableProperty(RPlotscriptTALinkabletext,RPlotscriptTA,"text");
			}
			
			protected function onTopSelection(event:MenuEvent):void
			{
				//trace("Hello");
			}
			
			
			private function menuItemClickHandler(e:Event):void
			{
				if((e as MenuEvent).label == "New Script")
				{
					newScript_clickHandler();
				}
				//series of checks to determine which menu item was clicked
				if((e as MenuEvent).label == "KMeans")
				{
					//to do :   do we  allow more than one editor type??
				  var kmeansEditor:KMeansClusteringEditor = new KMeansClusteringEditor();
				  FlexGlobals.topLevelApplication.visDesktop.addChild(kmeansEditor);   
					
				}
				
				if((e as MenuEvent).label == "Fuzzy KMeans Clustering") 
				{
					var fuzzyKmeansEditor:FuzzyKMeansClusteringEditor = new FuzzyKMeansClusteringEditor();
					FlexGlobals.topLevelApplication.visDesktop.addChild(fuzzyKmeansEditor); 
				}
				
				if((e as MenuEvent).label == "Data mining Platter") 
				{
					var platterInstance:DataMiningPlatter = DataMiningPlatter.getPlatterInstance();
					platterInstance.inputVariables = dataColumns;
					FlexGlobals.topLevelApplication.visDesktop.addChild(platterInstance); 
				}
			}
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]] where keys implement IQualifiedKey
			 */
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, false, keys);
				return [result.shift(), result];
			}
			
			
			protected function updateVariableAssignment(event:MouseEvent):void
			{
				//valueExhibitCollection.removeAll();//cleans the data grid entries before every selection
			    var colObjects:Array = dataColumns.getObjects(IAttributeColumn);
				
				//collecting Column Titles
				for(var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var colValuesString:String = "";
					for (var r:int = 0; r < col.keys.length; r++)
					{
						colValuesString += String(col.getValueFromKey(col.keys[r],Number)) + ", ";
					}
					
					var colName:String = ColumnUtils.getTitle(col);
					columnNames.push(colName);
					//generate a new object for each column and later for each new variable used in the script, results generated by script
					var columnentry:Object = new Object();
					columnentry.Columns = "Original Columns";
					columnentry.columnName = colName;
					columnentry.assignedVariable = "attr"+[i];
					columnentry.label = colValuesString;
					columnentry.value = colValuesString.substr(0,20) + "...";
					//collecting the names to be used for variables in R
					inputNames.push("attr"+[i]);
					if(i != colObjects.length)
					{
						variablesString = variablesString + inputNames[i] + ",";
						
					}
					valueExhibitCollection.addItem(columnentry);
				}
				
				
			}
			
			public function runningScript():void
			{
				//ResultTA.text = '';
				
				numberOfRCalls++;
				
				var result:Array = new Array();
				var joinedColumnQKeys:Array;
				var joinedColumnKeys:Array;
				var joinedColumns:Array;
				//Columns from ColumnListComponent 
				var colObjects:Array = dataColumns.getObjects(IAttributeColumn);
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				for(var i:int = 0; i<colObjects.length; i++)
				{
					attributeColumns[i] = colObjects[i] as IAttributeColumn;
				}
				
				if(colObjects.length >0)
				{					
					// get records for keys common to all columns 
					result = joinColumns(attributeColumns);
					joinedColumnQKeys = result[0];
					joinedColumns = result[1];
					//this is for JRI service
					//joinedColumnKeys = joinedColumnQKeys.concat();
				}
				
				// replace each IQualifiedKey with its localName
				// this for JRI service 
				/* var keyType:String = null;
				for (var j:int = 0; j < joinedColumnKeys.length; j++)
				{
				var qkey:IQualifiedKey = joinedColumnKeys[j];
				// sanity check
				if (keyType && keyType != qkey.keyType)
				{
				// there are multiple key types in the list of keys..
				Alert.show("This feature only works with keys having a common keyType.  Key types do not match: " + [keyType, qkey.keyType]);
				return;
				}
				keyType = qkey.keyType;
				joinedColumnKeys[j] = qkey.localName;
				} */
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				/* var RscriptAssignNames:String = assignTA.text;
				var assignNames:Array = VectorUtils.flatten(WeaveAPI.CSVParser.parseCSV(assignTA.text)); */
			
				//Script for R input
				var script:String = RScriptTA.text;
				var plotScript:String = RPlotscriptTA.text;
				// "\r" - replaced by "/n" in all occurance
				while(script.search("\r") > 0)
				{
					script = script.replace("\r","\n");
				}				
				//Script to get output from R
				var outputNames:Array = VectorUtils.flatten(WeaveAPI.CSVParser.parseCSV(outputTA.text));
				
				//Query is created from runScript with same signature from Jave side
				var showIntermediateResults:Boolean = intermediateResultCB.selected;
				var showWarnings:Boolean = warningCB.selected;
				var query:AsyncToken = Rservice.runScript(null,inputNames, inputValues, outputNames, script,plotScript, showIntermediateResults,showWarnings,false);
				
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, joinedColumnQKeys);
			}
			
			public var scriptResultValueExhibitMap:Dictionary = new Dictionary();
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				//var valueExhibitMap:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap());
				/* function():void { 
					return (colorFlag.value ? ALTERNATING_COLOR1 : ALTERNATING_COLOR2)); 
				} */
				
			
				var check:Array = new Array();
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError(lang("R Servlet did not return an Array of results as expected."));
					return;
				}
				
				//Clears previous Result
				RResultConsole.text = "";
				trace(ObjectUtil.toString(event.result));
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);	
					//testing
					var newVar:String = rResult.name; //+ "(" + numberOfRCalls +")";
					if(!scriptResultValueExhibitMap.hasOwnProperty(newVar))
						{
						scriptResultValueExhibitMap[newVar] = new Object();
							var newVarValue:Object = scriptResultValueExhibitMap[newVar];
							newVarValue.Columns = "ScriptResult";
							newVarValue.columnName = scriptTitle.text;
							newVarValue.assignedVariable = newVar;
							newVarValue.value = rResult.value;
							check.push(scriptResultValueExhibitMap[newVar]);
						}
				}
				
				for(var f:int = 0; f < check.length; f++)
				{
					scriptResultValueExhibitCollection.addItem(check[f]);
				}
				
				//TO display in ResultTA
				resultString= "";
				for (var j:int = 0; j < RresultArray.length; j++)
				{								
					resultString = resultString + RresultArray[j].name + ":" + ObjectUtil.toString(RresultArray[j].value) +"\n";
				}
				while (resultString.search("\"") > 0)
				{
					resultString = resultString.replace("\"","");
				}
				
				RResultConsole.text = resultString;
				
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token as Array;
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for (var p:int = 0;p < RresultArray.length; p++)
				{
					if(RresultArray[p].name == "Plot Results")
					{
						var imagePanel:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
						var image:Image = new Image();
						image.source = RresultArray[p].value;
						imagePanel.addChild(image);
						imagePanel.panelWidth.value = "500";
						imagePanel.panelHeight.value = "500";
					}
					if(RresultArray[p].value is Array){
						if(keys){
							if ((RresultArray[p].value).length == keys.length){
								if (RresultArray[p].value[0] is String)	{
									var testStringColumn:StringColumn = Weave.root.requestObject(RresultArray[p].name, StringColumn, false);
									var keyVec:Vector.<IQualifiedKey> = Vector.<IQualifiedKey>(keys);
									var dataVec:Vector.<String> = Vector.<String>(Robj[p].value);
									testStringColumn.setRecords(keyVec, dataVec);
									if (keys.length > 0)
										testStringColumn.metadata.@keyType = (keys[0] as IQualifiedKey).keyType;
									testStringColumn.metadata.@name = RresultArray[p].name;
								}
								else{
									var table:Array = [];
									for (var k:int = 0; k < keys.length; k++)
										table.push([ (keys[k] as IQualifiedKey).localName, Robj[p].value[k] ]);
									
									//testColumn are named after respective Objects Name (i.e) object{name: , value:}
									var testColumn:CSVColumn = Weave.root.requestObject(RresultArray[p].name, CSVColumn, false);
									testColumn.keyType.value = keys.length > 0 ? (keys[0] as IQualifiedKey).keyType : null;
									testColumn.numericMode.value = true;
									testColumn.data.setSessionState(table);
									testColumn.title.value = RresultArray[p].name;
								}
							}
						}						
					}										
				}
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError((event));
			}
			/* protected function assignTA_clickHandler(event:MouseEvent):void
			{
				var selectedTA:TextArea = (focusManager.getFocus()) as TextArea;
				focusedTA = selectedTA;
			}<assignNames>{assignTA.text}</assignNames>*/ 
			
			private var _sessionFileSaver:FileReference = null;
			private var _sessionFileLoader:FileReference = null;
			 protected function export_clickHandler(event:MouseEvent):void
			{
				var rScriptSessionState:XML =
					<RScriptEditor>
						<assignNames>{variablesString}</assignNames>
						<inputScript>{RScriptTA.text}</inputScript>
						<plotScript>{RPlotscriptTA.text}</plotScript>
						<outputScript>{outputTA.text}</outputScript>
					</RScriptEditor>;
				
				trace(rScriptSessionState);
				
				//WeaveXMLEncoder.encode(getSessionState(this)
				if(_sessionFileSaver == null)
				{
					_sessionFileSaver = new FileReference();
				}
				
				// Create a date that we can append to the end of each file to make them unique
				var date:Date = new Date();
				var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;
				
				_sessionFileSaver.save(rScriptSessionState, lang("R-Script Session State {0}", dateString) + ".xml");
			} 
			
			private var _defaultsFilename:String = null;
			protected function import_clickHandler(event:MouseEvent):void
			{
				var loadedXML:XML = new XML();
				if(_sessionFileLoader == null)
				{
					_sessionFileLoader = new FileReference();
					
					_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
					_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadIntoReditor(loadedXML);} );
				}
				_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				
			}
			
			
			protected function loadIntoReditor(xml:XML):void{
			//	assignTA.text = xml.assignNames;
				inputNames = variablesString.split(",")
				RScriptTA.text = xml.inputScript;
				RPlotscriptTA.text = xml.plotScript;
				outputTA.text = xml.outputScript;
			}
			
			private var focusedTA:TextArea = null; 
			
			protected function newScript_clickHandler():void
			{
				Alert.show("Do you want to save current script result?", "Deleting previous script" ,mx.controls.Alert.YES | mx.controls.Alert.NO,this,savingScriptResults, null,Alert.YES);
				resultString = "";
				
			}
			
			//this will save the script result in the debugger as a menu 
			//To do :Check signature of result if column or if single number
			private function savingScriptResults(event:CloseEvent):void
			{
				
			}
			
			
		]]>
	</mx:Script>
	
</DraggablePanel>
