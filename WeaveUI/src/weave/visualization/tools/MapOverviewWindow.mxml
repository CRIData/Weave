<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
@author kmanohar
<br/>A SimpleVisTool that is linked to the MapTool's layers
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*"
	     xmlns:mapTool="weave.visualization.tools.*"
	     >
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.events.ResizeEvent;
			import mx.utils.ObjectUtil;
			
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.primitives.IBounds2D;
			import weave.api.ui.IPlotLayer;
			import weave.primitives.Bounds2D;
			import weave.primitives.LinkableBounds2D;
			import weave.utils.NumberUtils;


			override protected function constructor():void
			{
				super.constructor();
				
				panelHeight.value = "25%";
				panelWidth.value = "25%";
				
				panelX.value = "0%";
				panelY.value = "0%";
				minimizable.value = false;
				maximizable.value = false;
				closeable.value = false;
				pinnable.value = false;
				enableBorders.value = false;

				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableAutoZoomToExtent.lock();
				
				// make sure WMS layers are included in the full data bounds
				visualization.includeNonSelectableLayersInAutoZoom.value = true;
				
				visualization.enableFixedAspectRatio.value = true;
			
				sessionPanelCoordsAsPercentages = false;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				 visualization.addChild(canvas);
				canvas.toolTip = "You are currently viewing the highlighted area";
			}
			
			override protected function updateForceEnableBorders():void
			{
				super.updateForceEnableBorders();
				drawBoundsRectangle();
			}
			
			public const parentDataBounds:LinkableBounds2D = newLinkableChild(this,LinkableBounds2D, drawBoundsRectangle, true);
			private var overviewDataBounds:IBounds2D = new Bounds2D();
			private var screenBounds:IBounds2D = new Bounds2D();
			private var tempBounds:IBounds2D = new Bounds2D();
			private const tempShape:Sprite = new Sprite();
			private var canvas:Canvas = new Canvas();
			
			public function drawBoundsRectangle():void
			{
				getDataScreenBounds();
				parentDataBounds.copyTo(tempBounds);
				
				if( tempBounds.isEmpty() || tempBounds.isUndefined() ) return;				
				if( screenBounds.isEmpty() || screenBounds.isUndefined()) return;
									
				var graphics:Graphics = canvas.graphics;
				graphics.clear();
				
				graphics.lineStyle(1);
				graphics.beginFill(0xffff00,0.5);

				visualization.dataBounds.copyTo(overviewDataBounds);
				overviewDataBounds.projectCoordsTo(tempBounds,screenBounds);

				graphics.drawRect(tempBounds.getXMin(),tempBounds.getYMin(),tempBounds.getWidth(),tempBounds.getHeight());
				graphics.endFill();
				
				//hack to enforce the clipContent property- this is a flex bug
				//otherwise, the rectangle can appear outside the component
				canvas.width = this.width+5;
				
			} 
			
			private function getDataScreenBounds():void
			{
				var i:int = 0;
				for each( var plotlayer:IPlotLayer in visualization.layers.getObjects(IPlotLayer))
				{
					if(i == 0) plotlayer.getScreenBounds(screenBounds);
					else {
						plotlayer.getScreenBounds(tempBounds);
						screenBounds.includeBounds(tempBounds); 					
					}
					i++;
				}
			}
		]]>
	</mx:Script>


</SimpleVisTool>
