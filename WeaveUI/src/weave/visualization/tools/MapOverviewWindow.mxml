<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!---
@author kmanohar
<br/>A SimpleVisTool that is linked to the MapTool's layers
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*"
	     xmlns:mapTool="weave.visualization.tools.*"
		 creationComplete="enableBorders.value = false"
	     >
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.utils.ObjectUtil;
			
			import weave.api.getCallbackCollection;
			import weave.api.primitives.IBounds2D;
			import weave.primitives.Bounds2D;
			import weave.primitives.LinkableBounds2D;
			import weave.utils.NumberUtils;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.RectanglePlotter;

			override protected function constructor():void
			{
				super.constructor();
				
				panelHeight.value = "25%";
				panelWidth.value = "25%";
				
				panelX.value = "0%";
				panelY.value = "0%";
				minimizable.value = false;
				maximizable.value = false;
				closeable.value = false;
				pinnable.value = false;

				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableAutoZoomToExtent.lock();
				
				// make sure WMS layers are included in the full data bounds
				visualization.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.includeNonSelectableLayersInAutoZoom.lock();
				
				visualization.enableFixedAspectRatio.value = true;
			
				sessionPanelCoordsAsPercentages = false;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				component.toolTip = "You are currently viewing the highlighted area";
				this.addChild(component);
			}

			private var tempBounds:IBounds2D = new Bounds2D();
			private const tempShape:Sprite = new Sprite();
			private var screenBounds:IBounds2D = new Bounds2D();
			private var component:UIComponent = new UIComponent();
			
			private const dataBoundsBitmap:Bitmap = new Bitmap(new BitmapData(20,20), PixelSnapping.NEVER, true);
			
			public function drawBoundsRectangle(dataBounds:LinkableBounds2D):void
			{
				dataBounds.copyTo(tempBounds);
				if( tempBounds.isEmpty() || tempBounds.isUndefined() ) return;
				getScreenBounds(screenBounds);
									
				var graphics:Graphics = tempShape.graphics;
				graphics.clear();
				
				graphics.lineStyle(1);
				graphics.beginFill(0xffff00,0.5);
				
				visualization.fullDataBounds.projectCoordsTo(tempBounds,screenBounds);
				
				graphics.drawRect(tempBounds.getXMin(),tempBounds.getYMin(),tempBounds.getWidth(),tempBounds.getHeight());
				graphics.endFill();
				
				component.addChild(tempShape);
			}
			
			private function getScreenBounds(outputScreenBounds:IBounds2D):void
			{
				// default behaviour is to set screenBounds beginning from lower-left corner and ending at upper-right corner
				var left:Number = visualization.marginLeft.value;
				var top:Number = visualization.marginTop.value;
				var right:Number = unscaledWidth - visualization.marginRight.value;
				var bottom:Number = unscaledHeight - visualization.marginBottom.value;
				// set screenBounds beginning from lower-left corner and ending at upper-right corner
				//TODO: is other behavior required?
				outputScreenBounds.setBounds(left, bottom, right, top);
				if (left > right)
					outputScreenBounds.setWidth(0);
				if (top > bottom)
					outputScreenBounds.setHeight(0);
			}
		]]>
	</mx:Script>


</SimpleVisTool>
