<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:settings="weave.ui.settings.*" xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			   layout = "absolute" >
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.data.IQualifiedKey;
			import weave.data.AttributeColumns.StringColumn;
			import weave.api.unlinkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.linkBindableProperty;
			import weave.utils.ColumnUtils;
			import weave.api.copySessionState;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.SliderEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.core.LinkableString;
			import weave.core.LinkableVariable;
			import weave.core.SessionManager;
			import weave.core.WeaveXMLDecoder;
			import weave.api.getCallbackCollection;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.api.data.IAttributeColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.BinningDefinitions.DynamicBinningDefinition;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveStatisticsServlet;
			import weave.services.beans.RResult;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.utils.BitmapText;
			import weave.utils.DebugUtils;
			import weave.core.UIUtils;
			import weave.utils.VectorUtils;
			import weave.api.ui.IPlotLayer;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.AxisPlotter;
			import weave.visualization.plotters.CircleGlyphPlotter;
			import weave.visualization.plotters.RamachandranBackgroundPlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;
			import weave.visualization.plotters.styles.SolidFillStyle;
			
			
			public var _plotter:ScatterPlotPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// add background layer
				var bg:PlotLayer = visualization.layers.requestObject("background", PlotLayer, true);
				bg.getDynamicPlotter().requestLocalObject(RamachandranBackgroundPlotter, true);
				
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(ScatterPlotPlotter) as ScatterPlotPlotter;
				xAxisEnabled = true;
				yAxisEnabled = true;
				

				xAxisLayer.axisPlotter.forceTickCount.value = true;
				yAxisLayer.axisPlotter.forceTickCount.value = true;
				xAxisLayer.axisPlotter.forceTickCount.lock();
				yAxisLayer.axisPlotter.forceTickCount.lock();
				xAxisLayer.axisPlotter.tickCountRequested.value = 9;
				yAxisLayer.axisPlotter.tickCountRequested.value = 9;
				xAxisLayer.axisPlotter.tickCountRequested.lock();
				yAxisLayer.axisPlotter.tickCountRequested.lock();
				
				//BEGIN TEMPORARY SOLUTION
				visualization.marginLeft.addImmediateCallback(this, updateAxisLabels);
				visualization.marginBottom.addImmediateCallback(this, updateAxisLabels);
				getCallbackCollection(_plotter).addImmediateCallback(this, updateAxisLabels, null, true);
				// END TEMPORARY SOLUTION
				
				visualization.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.enableZoomAndPan.value = false;
				visualization.enableAutoZoomToExtent.value = false;
				visualization.enableAutoZoomToExtent.lock();
				visualization.dataBounds.setBounds(-180,-180,180,180);
				
				visualization.enableXAxisProbing = true;
				visualization.enableYAxisProbing = true;
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, AttributeSelectorPanel.openDefaultSelector,[_plotter.xColumn])
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, AttributeSelectorPanel.openDefaultSelector,[_plotter.yColumn])
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(visualization.dataBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				initColumnDefaults(_plotter.xColumn, _plotter.yColumn, colorColumn);
				registerLinkableChild(this,histogramColumn);
				
				toolTitle.addImmediateCallback(this, updateTitle);
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				_plotter.enabledSizeBy.value = true;
				
				visualization.marginBottom.value = 80;
				visualization.marginTop.value    = 10;
				visualization.marginLeft.value   = 80;
				visualization.marginRight.value  = 10;
				
				linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.enabledSizeBy, sizeByCheck, "selected");
				_plotter.minScreenRadius.addImmediateCallback(this, updateSizeSlider);
				_plotter.maxScreenRadius.addImmediateCallback(this, updateSizeSlider, null, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X","Y","Color","Size","Histogram Column"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.xColumn,_plotter.yColumn,colorColumn,_plotter.radiusColumn,histogramColumn];
			}
			private function invalidateAxes():void
			{
				updateTitle();
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
					title = "Ramachandran Plot of " + ColumnUtils.getTitle(_plotter.xColumn) + " -vs- " + ColumnUtils.getTitle(_plotter.yColumn);
			}
			
			private function updateAxisLabels():void
			{
				visualization.setXAxisColumn(_plotter.xColumn);
				visualization.setYAxisColumn(_plotter.yColumn);
				
				if (_plotter == null)
					title = "Ramachandran Plot";
	/*			else
					title = "Ramachandran Plot of " + _plotter.xColumn.title + " -vs- " + _plotter.yColumn.title;
	*/			
				xAxisLayer.axisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.xColumn), 
					0,   
					0, visualization.marginBottom.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM);
				
				yAxisLayer.axisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.yColumn), 
					-90, 
					-visualization.marginLeft.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			private function popupHistogram():void
			{
				var histo:HistogramTool = Weave.root.requestObject(null, HistogramTool, false);
				histo.width = 300;
				histo.title = histo.title + "(SubSelection)";
				copySessionState(histogramColumn, histo.internalDataColumn);
				var keySet:KeySet = histo.visualization.getPlotLayer().subsetFilter.requestLocalObject(KeySet, false)
				copySessionState(Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET), keySet);
			}
			public const histogramColumn:DynamicColumn = new DynamicColumn();
			
			public const xRcolumn:DynamicColumn = new DynamicColumn();
			public const yRcolumn:DynamicColumn = new DynamicColumn();
			private static var selection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			private var Rservice:WeaveStatisticsServlet = new WeaveStatisticsServlet(Weave.properties.rServiceURL.value);
			private var _sessionFileLoader:FileReference = null;
			private var _defaultsFilename:String = null;
			
			protected function rScriptButton_clickHandler(event:MouseEvent):void
			{
				var loadedXML:XML = new XML();
				if(_sessionFileLoader == null)
				{
					_sessionFileLoader = new FileReference();
					
					_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
					_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadXMLtoUI(loadedXML);} );
				}
				
				_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				
			}
			protected function loadXMLtoUI(loadedXML:XML):void{
				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 
			
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				
					attributeColumns.push(xRcolumn as IAttributeColumn);
					attributeColumns.push(yRcolumn as IAttributeColumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent
				
					result = joinColumns(attributeColumns);
					joinedColumnKeys = result[0];
					joinedColumns = result[1];
				
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				var inputNames:Array =(String(loadedXML.columnNames)).split(",");
				//Script for R input
				var Rstring:String = loadedXML.inputScript;
				// "\r" - replaced by "/n" in all occurance
				while(Rstring.search("\r") > 0){
					Rstring = Rstring.replace("\r","\n");
				}
				var script:String = Rstring;
				
				//Script to get output from R
				var RscriptOutput:String = loadedXML.outputScript ;
				var outputNames:Array;
				if(RscriptOutput != ""){
					outputNames = RscriptOutput.split("\r");
				}
					//to avoid null reference
				else{
					outputNames = new Array();
				}
				
				//Query is created from runScript with same signature from Jave side
				var query:AsyncToken = Rservice.runScript(inputNames, inputValues, outputNames, script,"",false,false);
				//Keys are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,query.operation]);  
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{	
				
				var Robj:Object = new Object();
				Robj = event.result;
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for(var i:int = 0; i<(event.result).length; i++){
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
							
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token[0];
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for(var p:int = 0;p < RresultArray.length; p++){
					if((RresultArray[p].value).length == keys.length){
						/* var table:Array = [];
						for (var k:int = 0; k < keys.length; k++){						
							table.push([ keys[k], Robj[p].value[k] ]);
						} */
						//testColumn are named after respective Objects Name (i.e) object{name: , value:}
						var testColumn:StringColumn = Weave.root.requestObject(RresultArray[p].name, StringColumn, false);
						//testColumn.numericMode.value = false;
						var keyVec:Vector.<IQualifiedKey> = new Vector.<IQualifiedKey>();
						var dataVec:Vector.<String> = new Vector.<String>();
						VectorUtils.copy(keys, keyVec);
						VectorUtils.copy(Robj[p].value, dataVec);
						testColumn.updateRecords(keyVec, dataVec, true);
						//testColumn.csvData.value = WeaveAPI.CSVParser.createCSVFromArrays(table);						
					}					
				}
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace("fault on "+token, event.message);
			}
			
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]]
			 */
			private function joinColumns(columns:Array):Array
			{
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			override public function dispose():void
			{
				unlinkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				unlinkBindableProperty(_plotter.enabledSizeBy, sizeByCheck, "selected");
			}
			
			private function updateSizeSlider():void
			{
				sizeBySlider.values = [_plotter.minScreenRadius.value, _plotter.maxScreenRadius.value];
			}
			
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				if(event.thumbIndex == 0)
				{
					_plotter.minScreenRadius.value = event.value;
				}
				else
				{
					//_plotter.defaultScreenRadius.value = event.value;
					_plotter.maxScreenRadius.value = event.value;
				}
			}
			
			private function handleSizeByTextChange(event:Event):void
			{
				if (sizeByCheck.selected)
				{ 
					sizeByCheck.label = "Size by: " + ColumnUtils.getTitle(_plotter.radiusColumn);
					sizeByCheck.setStyle("textRollOverColor", "0x339900");
					sizeByCheck.setStyle("textSelectedColor", "0x339900");
					sizeByCheck.setStyle("Color", "0x339900");
					sizeBySlider.enabled = true;
					
				}
				else{
					sizeByCheck.label = "Size by: DISABLED";
					sizeByCheck.setStyle("textRollOverColor", "0xCC3300");
					sizeByCheck.setStyle("textSelectedColor", "0xCC3300");
					sizeByCheck.setStyle("Color", "0xCC3300");
					
					sizeBySlider.enabled = false;
				}
				
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
		]]>
	</mx:Script>
	
		<mx:Button right="5" bottom="5" label="popup" click="popupHistogram()"/>
		
	<ui:ControlPanel>
			<mx:Panel id="VizControlsPanel" 
					  label="Visualization Controls" 
					  headerHeight="2"
					  borderColor="0x000000" 
					  backgroundColor="0xCCCCCC" 
					  backgroundAlpha="0.0" 
					  borderThickness="0.0" 
					  width="100%" 
					  borderAlpha="0.2" 
					  borderStyle="none">
				<mx:VBox width="100%" 
						 verticalGap="0">
					<mx:VBox width="100%" 
							 id="scatterplotControls">
						<mx:HBox width="100%" 
								 borderStyle="inset" 
								 backgroundColor="0xFFFFFF" 
								 backgroundAlpha="0.7">
							<mx:Label text="Point Opacity:" 
									  color="0x000000" fontSize="12" 
									  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
							
							<mx:HSlider id="alphaSlider" 
										width="100%" 
										alpha="1.0"
										dataTipFormatFunction="alphaSliderFormatFunction"
										minimum="0.3" maximum="1.0" value="1.0"
										liveDragging="true"/>
						</mx:HBox>
						<mx:VBox borderStyle="inset"
								 backgroundColor="0xFFFFFF" 
								 backgroundAlpha="0.7"
								 width="100%">
							<mx:HBox width="100%"> 
								<mx:CheckBox id="sizeByCheck" 
											 fontSize="12" 
											 label="Size by: ENABLED" 
											 color="{sizeByCheck.selected? 0x339900 : 0xCC3300}"
											 textRollOverColor="0x339900"
											 selected="true" 
											 click="handleSizeByTextChange(event)"/>
								<mx:Label id="sizeByColumnLabel" enabled="{sizeByCheck.selected}" color="0xffffff" width="100%"  fontSize="9"/>
							</mx:HBox>
							
							<mx:HBox width="100%"> 
								<mx:Label text="Point Size:" 
										  color="0x000000" 
										  fontSize="12"/>
								<mx:HSlider id="sizeBySlider"
											liveDragging="true"
											width="100%"
											thumbCount="2" 
											snapInterval="1"
											minimum="1" 
											tickInterval="1"
											change="handleSizeSliderChange(event)"
											mouseDown="event.stopImmediatePropagation();"/>
							</mx:HBox>
							<ui:DynamicColumnComponent label="x column" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.xColumn"/>
							<ui:DynamicColumnComponent label="y column" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.yColumn"/>
							<ui:DynamicColumnComponent label="color" initialize="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"/>
							<ui:DynamicColumnComponent label="size" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.radiusColumn"/>
							<ui:DynamicColumnComponent label="Histogram Column" initialize="(event.target as DynamicColumnComponent).dynamicObject = histogramColumn"/>
						</mx:VBox>
					</mx:VBox>
					<mx:HBox width="100%">
					</mx:HBox>
				</mx:VBox>
				
				
			</mx:Panel>
	</ui:ControlPanel>
</SimpleVisTool>
