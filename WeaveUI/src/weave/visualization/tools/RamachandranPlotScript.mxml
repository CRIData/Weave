<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				xmlns:ui="weave.ui.*" 
				title="Ramachandran Plot Script"
				>
	<mx:TabNavigator width="100%"
					 height="100%"
					 backgroundAlpha="0.0"
					 borderStyle="outset" alpha=".9">
		<mx:Panel id="Sequencer" label="Sequence" paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10"
				  borderColor="0x000000" 
				  backgroundColor="0x000000" 
				  backgroundAlpha="0.21" 
				  headerHeight="5" 
				  height="100%" 
				  width="100%" 
				  borderAlpha="0.2"
				  cornerRadius="0">
			<mx:HBox width="100%" height="100%">
				<mx:TextArea id="SequenceTA" width="80%" height="100%" />
				<mx:TextArea id="motifResult" width="20%" height="100%"/>
			</mx:HBox>					
			<mx:ControlBar id="SequenceCB">
				<mx:TextInput id="motifTI" text="Motif"/>
				<mx:Button id="motifSearchBtn" label="Search" click="motifSearchBtn_clickHandler(event)"/>
				<mx:Button id="motifHighlightBtn" label="Highlight" click="SequenceTA_changeHandler(event)"/>
			</mx:ControlBar>
		</mx:Panel>
		<mx:Panel id="ControlPanel" label="R-Script"
				  borderColor="0x000000" 
				  backgroundColor="0x000000" 
				  backgroundAlpha="0.21" 
				  headerHeight="5" 
				  height="100%" 
				  width="100%" 
				  borderAlpha="0.2"
				  cornerRadius="0">
			
			<mx:Accordion height="100%" 
						  width="100%"
						  backgroundAlpha="0.21" 
						  borderThickness="5.0" 
						  borderStyle="outset"  borderColor="0xFFFFFF"
						  creationPolicy="all">
				<mx:Canvas id="aminoAcidScript" label="Split as Amino Acids"  >
					<mx:VBox paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
						<ui:DynamicColumnComponent label="Chain" initialize="(event.target as DynamicColumnComponent).dynamicObject = chainRcolumn"/>	
						<mx:CheckBox id="aminoCheckBox" label="Amino Acids" selected="true"/>
						<mx:CheckBox id="chainCheckBox" label="Chain"/>
						<mx:CheckBox id="aminoPosCheckBox" label="Amino Acids Position"/>					
						
						<mx:Button id="ChainrScriptButton" label="Run Script" click="ChainrScriptButton_clickHandler(event)"/>
						
					</mx:VBox>	
					
				</mx:Canvas>
				<mx:Canvas id="aminoAcidNatureScript" label="Nature of Amino Acids"  >
					<mx:VBox paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
						<ui:DynamicColumnComponent label="Chain" initialize="(event.target as DynamicColumnComponent).dynamicObject = chainNatureRcolumn"/>									
						
						<mx:Button id="ChainNaturerScriptButton" label="Run Script" click="ChainNaturerScriptButton_clickHandler(event)"/>
						
					</mx:VBox>	
					
				</mx:Canvas>
				<mx:Canvas id="RscriptPanel" label="KMeans Clustering" >
					<mx:VBox paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
						<ui:DynamicColumnComponent label="R-Script Xcolumn" initialize="(event.target as DynamicColumnComponent).dynamicObject = xRcolumn"/>
						<ui:DynamicColumnComponent label="R-Script ycolumn" initialize="(event.target as DynamicColumnComponent).dynamicObject = yRcolumn"/>
						<mx:HBox>
							<mx:VBox>
								<mx:Label text="Number of Clusters:"/>
								<mx:Label text="Number of Iterations:"/>
							</mx:VBox>
							<mx:VBox>
								<mx:TextInput id="clusterNum" text="{clusterNumValue}"/>							
								<mx:TextInput id="iterNum" text="{iterNumValue}"/>							
							</mx:VBox>							
						</mx:HBox>						
						<mx:Button id="rScriptButton" label="Run Script" click="Kmeans_clickHandler(event)"/>						
					</mx:VBox>
					
				</mx:Canvas>					
			</mx:Accordion>		
		</mx:Panel>
		
		
	</mx:TabNavigator>
	
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.data.QKeyManager;
			import weave.api.data.IQualifiedKey;
			import weave.api.data.IAttributeColumn;
			import weave.data.AttributeColumns.StringColumn;
			import weave.utils.ColumnUtils;
			import weave.core.ErrorManager;
			import mx.controls.Alert;
			import mx.controls.textClasses.TextRange;
			import mx.events.ChildExistenceChangedEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.SliderEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.data.AttributeColumns.CSVColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.api.data.IAttributeColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.BinningDefinitions.DynamicBinningDefinition;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveStatisticsServlet;
			import weave.services.beans.RResult;
			import weave.core.LinkableString;
			import weave.core.LinkableVariable;
			import weave.core.SessionManager;
			import weave.core.WeaveXMLDecoder;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.utils.BitmapText;
			import weave.utils.DebugUtils;
			import weave.core.UIUtils;
			import weave.utils.VectorUtils;
			import weave.core.weave_internal;
			
			
			[Bindable]
			private var clusterNumValue:int = 3;
			[Bindable]
			private var iterNumValue:int = 3;
			
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
			}
			
			private function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			public const xRcolumn:DynamicColumn = new DynamicColumn();
			public const yRcolumn:DynamicColumn = new DynamicColumn();
			public const chainRcolumn:DynamicColumn = new DynamicColumn();
			public const chainNatureRcolumn:DynamicColumn = new DynamicColumn();
			private static var selection:KeySet = Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			private var Rservice:WeaveStatisticsServlet = new WeaveStatisticsServlet(Weave.properties.rServiceURL.value);
			private var _sessionFileLoader:FileReference = null;
			private var _defaultsFilename:String = null;
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]]
			 */
			private function joinColumns(columns:Array):Array
			{
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			protected function Kmeans_clickHandler(event:MouseEvent):void
			{				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn				
				attributeColumns.push(xRcolumn as IAttributeColumn);
				attributeColumns.push(yRcolumn as IAttributeColumn);				
				//joinColumns Called only When columns are added to ColumnListComponent				
				var keyType:String = new String();
				keyType = ColumnUtils.getKeyType(xRcolumn);				
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];				
				//Values need to assign for Column names in R
				var assignValues:Array = joinedColumns;
				var clusterNumArray:Array = [Number(clusterNum.text)];
				assignValues.push(clusterNumArray);
				var iterNumArray:Array = [Number(iterNum.text)];
				assignValues.push(iterNumArray);
				//Names for Column that need to be used in R
				var assignNames:Array =["x","y"];
				assignNames.push("cnum");
				assignNames.push("inum");
				//Script for R input
				var Rstring:String = "dataframe1 <- data.frame(x, y)\n"
					+"Clustering <- function(clusternumber,iter.max){\n"
					+"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"
					+"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"
					+"while(result1$centers != result2$centers){\n"
					+"iter.max <- iter.max + 1\n"
					+"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"
					+"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"
					+"}\n"
					+"print(result1)\n"
					+"print(result2)\n"
					+"}\n"
					+"Cluster <- Clustering(cnum,inum)\n";
				
				var script:String = Rstring;				
				//Script to get output from R
				var RscriptOutput:String = "Cluster$cluster" ;
				var outputNames:Array;
				if(RscriptOutput != "")
					outputNames = RscriptOutput.split("\r");				
				else
					outputNames = new Array();					
				
				var query:AsyncToken = Rservice.runScript(assignNames, assignValues, outputNames, script,"",false,false);
				//Keys and Keytype are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,keyType]);
				
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{	
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				if (Robj == null)
				{
					var error:Error = new Error("R Servlet did not return an Array of results as expected.");
					ErrorManager.reportError(error);
					return;
				}
				
				trace(ObjectUtil.toString(event.result));
				
				if (Robj == null)
				{
				}
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
				
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token[0] as Array;
				var keyType:String = token[1];
				var sequence:String;
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for(var p:int = 0;p < RresultArray.length; p++){
					if((RresultArray[p].value).length == keys.length){
						if(RresultArray[p].value[0] is String){
							var testStringColumn:StringColumn = Weave.root.requestObject(RresultArray[p].name, StringColumn, false);
							var keyVec:Vector.<IQualifiedKey> = new Vector.<IQualifiedKey>();
							var dataVec:Vector.<String> = new Vector.<String>();
							VectorUtils.copy(keys, keyVec);
							VectorUtils.copy(Robj[p].value, dataVec);
							testStringColumn.updateRecords(keyVec, dataVec, true);
							testStringColumn.weave_internal::metadata.@keyType =  keyType;
							testStringColumn.weave_internal::metadata.@name = RresultArray[p].name;
							if(RresultArray[p].name == "RP$AminoAcids"){
								sequence =(RresultArray[p].value as Array).join();
								while(sequence.search(",") > 0){
									sequence = sequence.replace(","," ");
								}
								SequenceTA.text = sequence;
							}
							trace((RresultArray[p].value as Array).join());
						}
						else{
							var table:Array = [];
							for (var k:int = 0; k < keys.length; k++)
								table.push([ (keys[k] as IQualifiedKey).localName, Robj[p].value[k] ]);
							
							//testColumn are named after respective Objects Name (i.e) object{name: , value:}
							var testColumn:CSVColumn = Weave.root.requestObject(RresultArray[p].name, CSVColumn, false);
							testColumn.keyType.value = keys.length > 0 ? (keys[0] as IQualifiedKey).keyType : null;
							testColumn.numericMode.value = true;
							testColumn.csvData.value = WeaveAPI.CSVParser.createCSVFromArrays(table);
							testColumn.title.value = RresultArray[p].name;
						}						
					}
					if(RresultArray[p].name == "Mot$MatchPositions"){
						
						var txtHighlight:TextRange = new TextRange(SequenceTA);
						//txtHighlight.owner = SequenceTA;
						txtHighlight.color = 0x000000;
						
						for(var TAindex:int  = 0; TAindex< RresultArray[p].value.length; TAindex++){
							txtHighlight.beginIndex = RresultArray[p].value[TAindex]-1;
							txtHighlight.endIndex =  RresultArray[p].value[TAindex] + motifTI.text.length;
							txtHighlight.color = 0xFF0000;
						}
						trace("original Key\n" +  RresultArray[p].value)
						
						var keysFromSeq:Array = RresultArray[p].value;
						for(var keyIndex:int=0;keyIndex < keysFromSeq.length;keyIndex++){
							var temp:int = keysFromSeq[keyIndex]/4;
							keysFromSeq[keyIndex] = String(temp);							
						}
						trace("1keys from seq\n" + keysFromSeq);
						
						selection.replaceKeys(WeaveAPI.QKeyManager.getQKeys('proteinsRama', keysFromSeq));
						
						motifResult.text ="Total Match:" +RresultArray[p].value.length +"\n" + ObjectUtil.toString(RresultArray[p].value);
						trace("keys from seq\n" + keysFromSeq);
					}
					/* if(RresultArray[p].name == "Mot$Number_Of_Matches"){								
						
						motifResult.text = ObjectUtil.toString(RresultArray[p].value);
						
					} */
				}
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace("fault on "+token, event.message);
			}
			
			protected function rScriptButton_clickHandler(event:MouseEvent):void
			{
				var loadedXML:XML = new XML();
				if(_sessionFileLoader == null)
				{
					_sessionFileLoader = new FileReference();
					
					_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
					_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadXMLtoUI(loadedXML);} );
				}
				
				_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				
			}
			protected function loadXMLtoUI(loadedXML:XML):void{
				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				
				attributeColumns.push(xRcolumn as IAttributeColumn);
				attributeColumns.push(yRcolumn as IAttributeColumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];
				
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				var inputNames:Array =(String(loadedXML.columnNames)).split(",");
				//Script for R input
				var Rstring:String = loadedXML.inputScript;
				// "\r" - replaced by "/n" in all occurance
				while(Rstring.search("\r") > 0){
					Rstring = Rstring.replace("\r","\n");
				}
				var script:String = Rstring;
				
				//Script to get output from R
				var RscriptOutput:String = loadedXML.outputScript ;
				var outputNames:Array;
				if(RscriptOutput != ""){
					outputNames = RscriptOutput.split("\r");
				}
					//to avoid null reference
				else{
					outputNames = new Array();
				}
				
				//Query is created from runScript with same signature from Jave side
				var query:AsyncToken = Rservice.runScript(inputNames, inputValues, outputNames, script,"",false,false);
				//Keys are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,query.operation]);  
			}
			
			
			protected function ChainrScriptButton_clickHandler(event:MouseEvent):void
			{
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn				
				attributeColumns.push(chainRcolumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent				
				var keyType:String = new String();
				keyType = ColumnUtils.getKeyType(chainRcolumn);				
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];				
				//Values need to assign for Column names in R
				var assignValues:Array = joinedColumns;
				
				//Names for Column that need to be used in R
				var assignNames:Array =["v"];
				
				//Script for R input
				var Rstring:String = "Extract <- function(proteinSheets){\n"
					+"ChainNo <- c()\n"
					+"AminoAcidCount <- c()\n"
					+"AminoAcid <- c()\n"
					+"parts <- strsplit(proteinSheets,\":\",perl=T)\n"
					+"i <- 1\n"
					+"while(i <= length(proteinSheets)){\n"
					+"chain <- strsplit(parts[[i]][2],\"[^0-9]\",perl=T)[[1]][6]\n"
					+"chain <- as.numeric(chain)\n"
					+"ChainNo <- append(ChainNo,chain, after = length(ChainNo))\n"
					+"aminopos <- strsplit(parts[[i]][3],\"[^0-9]\",perl = T)[[1]][4]\n"
					+"aminopos <- as.numeric(aminopos)\n"
					+"AminoAcidCount <- append(AminoAcidCount, aminopos, after= length(AminoAcidCount))\n"
					+"aa <- strsplit(parts[[i]][3],\"[^A-Za-z]\",perl=T)[[1]][1]\n"
					+"AminoAcid <- append(AminoAcid,aa,after = length(AminoAcid))\n"
					+"i <- i + 1\n"
					+"}\n"
					+"Result <- list(ChainNumber = ChainNo, AminoAcids = AminoAcid, AminoAcidPos = AminoAcidCount)\n"
					+"print(Result)\n"
					+"}\n"
					+"RP<-Extract(v)";
				
				var script:String = Rstring;				
				//Script to get output from R
				var outputNames:Array = new Array();
				if(aminoCheckBox.selected)
					outputNames.push("RP$AminoAcids");
				if(aminoPosCheckBox.selected)
					outputNames.push("RP$AminoAcidPos");
				if(chainCheckBox.selected)
					outputNames.push("RP$ChainNumber");					
				
				
				var query:AsyncToken = Rservice.runScript(assignNames, assignValues, outputNames, script,"",false,false);
				//Keys and Keytype are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,keyType]);
			}
			
			
			protected function ChainNaturerScriptButton_clickHandler(event:MouseEvent):void
			{
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn				
				attributeColumns.push(chainNatureRcolumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent				
				var keyType:String = ColumnUtils.getKeyType(chainNatureRcolumn);
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];				
				//Values need to assign for Column names in R
				var assignValues:Array = joinedColumns;
				
				//Names for Column that need to be used in R
				var assignNames:Array =["v"];
				
				//Script for R input
				var Rstring:String = "Extract <- function(proteinSheets){\n"
					+"ChainNo <- c()\n"
					+"AminoAcidCount <- c()\n"
					+"AminoAcid <- c()\n"
					+"parts <- strsplit(proteinSheets,\":\",perl=T)\n"
					+"i <- 1\n"
					+"while(i <= length(proteinSheets)){\n"
					+"chain <- strsplit(parts[[i]][2],\"[^0-9]\",perl=T)[[1]][6]\n"
					+"chain <- as.numeric(chain)\n"
					+"ChainNo <- append(ChainNo,chain, after = length(ChainNo))\n"
					+"aminopos <- strsplit(parts[[i]][3],\"[^0-9]\",perl = T)[[1]][4]\n"
					+"aminopos <- as.numeric(aminopos)\n"
					+"AminoAcidCount <- append(AminoAcidCount, aminopos, after= length(AminoAcidCount))\n"
					+"aa <- strsplit(parts[[i]][3],\"[^A-Za-z]\",perl=T)[[1]][1]\n"
					+"AminoAcid <- append(AminoAcid,aa,after = length(AminoAcid))\n"
					+"i <- i + 1\n"
					+"}\n"
					+"Result <- list(ChainNumber = ChainNo, AminoAcids = AminoAcid, AminoAcidPos = AminoAcidCount)\n"
					+"print(Result)\n"
					+"}\n"
					+"RP<-Extract(v)\n"
					+"Grouping <- function(aminoacid){\n"
					+"groups <- c()\n"
					+"i <- 1\n"
					+"while(i <= length(aminoacid)){\n"
					+"if((aminoacid[i] == \"Phe\")||(aminoacid[i] == \"Tyr\")||(aminoacid[i]==\"Trp\")){\n"
					+"groups <- append(groups,\"Aromatic\", after = length(groups))\n"
					+"}\n"
					+"if((aminoacid[i] == \"Gly\")||(aminoacid[i] == \"Ala\")||\n"
					+"(aminoacid[i] == \"Pro\")||(aminoacid[i] == \"Val\")||\n"
					+"(aminoacid[i] == \"Leu\")||(aminoacid[i] == \"Ile\")||(aminoacid[i] == \"Met\")){\n"
					+"groups <- append(groups,\"Aliphatic\", after = length(groups))\n"
					+"}\n"
					+"if((aminoacid[i] == \"Ser\")||(aminoacid[i] == \"Thr\")||\n"
					+"(aminoacid[i] == \"Cys\")||(aminoacid[i] == \"Asn\")||\n"
					+"(aminoacid[i] == \"Gln\")){\n"
					+"groups <- append(groups,\"Uncharged\", after = length(groups))\n"
					+"}\n"
					+"if((aminoacid[i] == \"Lys\")||(aminoacid[i] == \"His\")||\n"
					+"(aminoacid[i] == \"Arg\")){\n"
					+"groups <- append(groups,\"Positively_Charged\", after = length(groups))\n"
					+"}\n"
					+"if((aminoacid[i] == \"Asp\")||(aminoacid[i] == \"Glu\")){\n"
					+"groups <- append(groups,\"Negatively_Charged\", after = length(groups))\n"
					+"}\n"
					+"i <- i + 1\n"
					+"}\n"
					+"print(groups)\n"
					+"return(groups)\n"
					+"}\n"
					+"AminoAcidNature<-Grouping(RP$AminoAcids)";
				
				var script:String = Rstring;				
				//Script to get output from R
				var outputNames:Array = new Array();			
				outputNames.push("AminoAcidNature");
				
				
				
				var query:AsyncToken = Rservice.runScript(assignNames, assignValues, outputNames, script,"",false,false);
				//Keys and Keytype are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,keyType]);
			}
			
			
			protected function SequenceTA_changeHandler(event:Event):void
			{
				
				var cursorPosBegin:int = SequenceTA.selectionBeginIndex;
				var cursorPosEnd:int = SequenceTA.selectionEndIndex;
				var keys:Array = new Array();
				if(cursorPosBegin/4 != 0){
					
				}
				var initialKey:int = cursorPosBegin/4;
				var finalKey:int = cursorPosEnd/4;
				for(var i:int = initialKey; i<=finalKey;i++){
					keys.push(i);
				}
				selection.replaceKeys(WeaveAPI.QKeyManager.getQKeys('String', keys));
			}
			
			
			protected function motifSearchBtn_clickHandler(event:MouseEvent):void
			{
				var assignNames:Array = new Array();
				var assignValues:Array = new Array();
				assignNames.push("sequence");
				var assignSequence:Array = new Array();//required as in Java for R assign it needs array as input
				assignSequence.push(SequenceTA.text);
				assignValues.push(assignSequence);
				
				assignNames.push("motif");
				var assignMotif:Array = new Array();
				assignMotif.push(motifTI.text);
				assignValues.push(assignMotif);
				var script:String = "Motif_Search <- function(string,pattern){\n"
					+"string1 <- paste(string,collapse = '')\n"
					+"match <- lapply(gregexpr(pattern,string1),function(x) cbind(x,attr(x,\"match.length\")))\n"
					+"PositionofMatches <- match[[1]][,1]\n"
					+"NumberofMatches <- length(PositionofMatches)\n"
					+"result <- list(MatchPositions = PositionofMatches,Number_of_Matches = NumberofMatches)\n"
					+"return(result)\n"
					+"}\n"
					+"Mot<-Motif_Search(sequence,motif)";
				var outputNames:Array = new Array();
				outputNames.push("Mot$MatchPositions");
				outputNames.push("Mot$Number_of_Matches");
				var query:AsyncToken = Rservice.runScript(assignNames, assignValues, outputNames, script,"",false,false);
				//Keys and Keytype are passed as token 
				DelayedAsyncResponder.addResponder(query, handleRunScriptResult, handleRunScriptFault, [new Array,new String]);
			}
			
		]]>
	</mx:Script>
	
</DraggablePanel>
