<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    width="100%" height="100%" creationComplete="handleCreationComplete()" enabled="{targetItem != null}">
    <mx:TabNavigator width="100%" height="100%">
        <ui:MetadataGrid id="publicMetaGrid" label="Public" 
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" enabled="{targetItem != null}"/>    
        <ui:MetadataGrid id="privateMetaGrid" label="Private" 
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" enabled="{targetItem != null}"/>
    </mx:TabNavigator>
    <mx:HBox>
        <mx:Button label="Discard Changes" enabled="{isChanged}" click="setEditors(null)"/>
        <mx:Button label="Save Changes" enabled="{isChanged}" click="saveChanges()"/>
        <mx:Button label="Debug Meta" click="printpubMeta()"/>
    </mx:HBox>
<mx:Script>
<![CDATA[
	import mx.binding.utils.ChangeWatcher;
	import mx.controls.Alert;
	
	import weave.core.UIUtils;
	import weave.services.AdminInterface;
	import weave.services.MetadataCache;
	import weave.services.WeaveAdminService;
	import weave.services.addAsyncResponder;
	import weave.services.beans.AttributeColumnInfo;
	import weave.services.beans.EntityMetadata;
	
    [Bindable] public var targetItem:EntityNode = null;
    [Bindable] public var isChanged:Boolean = false;

    private var pubWatcher:ChangeWatcher;
    private var privWatcher:ChangeWatcher;
    public function handleCreationComplete():void
    {
        ChangeWatcher.watch(this, "targetItem", setEditors);
        pubWatcher = ChangeWatcher.watch(publicMetaGrid, "metadata", metaChanged);
        privWatcher = ChangeWatcher.watch(privateMetaGrid, "metadata", metaChanged);
    }
    private function setEditors(..._):void
    {
        if (targetItem == null)
        {
            return;
        }
		var entity:AttributeColumnInfo = targetItem.getEntity();
        publicMetaGrid.metadata = entity.publicMetadata;
        privateMetaGrid.metadata = entity.privateMetadata;
    }
    private function metaChanged(..._):void
    {
		var entity:AttributeColumnInfo = targetItem.getEntity();
        var pubDiff:Object = MetadataCache.diffObjects(publicMetaGrid.metadata, entity.publicMetadata);
        var privDiff:Object = MetadataCache.diffObjects(privateMetaGrid.metadata, entity.privateMetadata);
        var prop:String;
        for (prop in pubDiff)
        {
            isChanged = true;
            return;
        }
        for (prop in privDiff)
        {
            isChanged = true;
            return;
        }
        isChanged = false;
    }
    private function saveChanges():void
    {
		var entity:AttributeColumnInfo = targetItem.getEntity();
        var pubDiff:Object = MetadataCache.diffObjects(entity.publicMetadata, publicMetaGrid.metadata);
        var privDiff:Object = MetadataCache.diffObjects(entity.privateMetadata, privateMetaGrid.metadata);
        function validateCommit(..._):void
        {
            metaChanged();
            if (isChanged)
			{
                /* Spit out error */
			}
            else
                setEditors();
        }
		var diff:EntityMetadata = new EntityMetadata();
		diff.publicMetadata = pubDiff;
		diff.privateMetadata = privDiff;
        addAsyncResponder(AdminInterface.instance.meta_cache.update_metadata(entity.id, diff), validateCommit);
    }
    private static function printobj(o:Object):void
    {
        for (var prop:String in o)
			weaveTrace(prop + ":" + o[prop]);
    }
    private function printpubMeta():void
    {
        printobj(publicMetaGrid.metadata);
    }

]]>
</mx:Script>
</mx:VBox>
