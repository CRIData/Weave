<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    width="100%" height="100%"
	creationComplete="handleCreationComplete()">
    <mx:TabNavigator width="100%" height="100%">
        <ui:MetadataGrid id="publicMetaGrid" label="Public ({publicMetaGrid.grid.dataProvider ? publicMetaGrid.grid.dataProvider.length : 0})"
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
        <ui:MetadataGrid id="privateMetaGrid" label="Private ({privateMetaGrid.grid.dataProvider ? privateMetaGrid.grid.dataProvider.length : 0})"
            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
    </mx:TabNavigator>
    <mx:HBox>
        <mx:Button label="Discard Changes" enabled="{isChanged}" click="refresh()"/>
        <mx:Button label="Save Changes" enabled="{isChanged}" click="saveChanges()"/>
        <mx:Button label="Debug Meta" click="printpubMeta()"/>
    </mx:HBox>
<mx:Script>
<![CDATA[
	import mx.binding.utils.BindingUtils;
	import mx.utils.ObjectUtil;
	
	import weave.api.getCallbackCollection;
	import weave.api.reportError;
	import weave.services.Admin;
	import weave.services.beans.Entity;
	import weave.services.beans.EntityMetadata;
	
	public function handleCreationComplete():void
	{
		BindingUtils.bindSetter(metaChanged, publicMetaGrid, 'metadata');
		BindingUtils.bindSetter(metaChanged, privateMetaGrid, 'metadata');
		getCallbackCollection(Admin.entityCache).addImmediateCallback(this, handleEntityCache);
	}

	[Bindable] private var publicPropertyCount:int = 0;
	[Bindable] private var privatePropertyCount:int = 0;
    [Bindable] public var isChanged:Boolean = false;
	
	private var _targetItems:Array;
	[Bindable] public function get targetItems():Array
	{
		return _targetItems;
	}
	public function set targetItems(items:Array):void
	{
		_targetItems = items;
		refresh();
	}
	
	private function refresh():void
	{
		//TODO: support editing multiple items at a time
		
		if (_targetItems == null || _targetItems.length == 0 || _targetItems.length > 1)
		{
			this.enabled = false;
			return;
		}
		this.enabled = true;
		
		var item:EntityNode = _targetItems[0];
		
		var entity:Entity = item.getEntity();
        publicMetaGrid.metadata = entity.publicMetadata;
        privateMetaGrid.metadata = entity.privateMetadata;
	}

    private function metaChanged(..._):void
    {
		if (_targetItems == null || _targetItems.length > 1)
			return;
		
		var item:EntityNode = _targetItems[0];
		
		var entity:Entity = item.getEntity();
		var diff:EntityMetadata = entity.getDiff(privateMetaGrid.metadata, publicMetaGrid.metadata);
        var prop:String;
        for (prop in diff.privateMetadata)
        {
            isChanged = true;
            return;
        }
        for (prop in diff.publicMetadata)
        {
            isChanged = true;
            return;
        }
        isChanged = false;
    }
    private function saveChanges():void
    {
		if (_targetItems == null || _targetItems.length > 1)
			return;
		
		var item:EntityNode = _targetItems[0];
		
		var entity:Entity = item.getEntity();
		var diff:EntityMetadata = entity.getDiff(privateMetaGrid.metadata, publicMetaGrid.metadata);
		
        Admin.entityCache.update_metadata(entity.id, diff);
		checkIsChanged = true;
    }
	private var checkIsChanged:Boolean = false;
	private function handleEntityCache(..._):void
	{
		if (checkIsChanged)
		{
			checkIsChanged = false;
			
            metaChanged();
			
            if (isChanged)
			{
                reportError('handleEntityCache(): isChanged is true');
			}
		}
		
		if (!isChanged)
		{
			refresh();
		}
	}
	
    private function printpubMeta():void
    {
        weaveTrace(ObjectUtil.toString(publicMetaGrid.metadata));
    }

]]>
</mx:Script>
</mx:VBox>
