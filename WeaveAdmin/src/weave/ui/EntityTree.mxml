<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    creationComplete="handleCreated()" itemOpening="onExpand(event)"
    change="onChange(event)"
    openDuration="0" dragEnabled="true"
    showRoot="false">
<mx:Script>
<![CDATA[
import weave.services.AdminInterface;
import weave.services.beans.AttributeColumnInfo;
import weave.services.WeaveAdminService;
import weave.ui.EntityTreeNode;
import weave.ui.EntityTreeRoot;
import weave.ui.HierarchyDescriptor;

import mx.collections.ArrayCollection;
import mx.events.ListEvent;
import mx.events.TreeEvent;
import mx.events.DragEvent;
import mx.managers.DragManager;
import mx.events.PropertyChangeEvent;
import mx.rpc.events.ResultEvent;
import mx.binding.utils.ChangeWatcher;
import mx.utils.ObjectUtil;

import flash.utils.getQualifiedClassName;

public var entityType:int;
private var connWatcher:ChangeWatcher;
[Bindable] public var selectedType:int;

public function onExpand(event:TreeEvent):void
{
    if (!event.opening) return; // If we're closing, don't do anything.
    var item:EntityTreeNode = event.item as EntityTreeNode;
    var watch_once:ChangeWatcher = null;
    if (item.children == null)
    {
        event.preventDefault();
        // Setup a oneoff changewatcher. There must be a better way to do this. 
        watch_once = ChangeWatcher.watch(item, "children", onPopulated);
    }
    function onPopulated(o:Object):void
    {
        if (watch_once != null)
            watch_once.unwatch();
        var tree:Tree = event.target as Tree;
       // tree.dataProvider.itemUpdated(event.item);
        tree.expandItem(event.item, true, false);
        tree.validateNow();
    }
} 

public function onChange(event:ListEvent):void
{
    var etn:EntityTreeNode = selectedItem as EntityTreeNode;
    if (etn == null) 
    {
        selectedType = -1;
        return;
    }
    selectedType = etn.object.entity_type;

}
private function filterByType(item:Object):Boolean
{
    var etn:EntityTreeNode = item as EntityTreeNode;
    if (etn == null)
    {
        EntityTreeNode.yell("Something has gone horribly wrong in EntityTree.");
        return false;
    }
    if (etn.object != null)
        return (etn.object.entity_type == entityType || etn.object.entity_type == AttributeColumnInfo.COLUMN); 
    else
        return false;
}
public function handleCreated():void
{
    var tree:EntityTree = this as EntityTree;
    function connectionReady(event:PropertyChangeEvent):void
    {
       tree.connectionReady(event, tree); 
    }
    connWatcher = ChangeWatcher.watch(AdminInterface.instance, "userHasAuthenticated", connectionReady);
}
private function connectionReady(event:PropertyChangeEvent, tree:Tree):void
{
    dataDescriptor = new HierarchyDescriptor();
    if (event.newValue == true)
    {
        function setProvider(event:Object):void
        {
            tree.dataProvider = new EntityTreeRoot(this.entityType);
            tree.validateNow();
        }
        AdminInterface.instance.meta_cache.get_children(-1, setProvider);
    }
}
]]>
</mx:Script>
</mx:Tree>
